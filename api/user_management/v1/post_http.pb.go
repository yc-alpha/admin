// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--rc1
// source: user_management/v1/post.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPositionServiceCreatePosition = "/user_management.v1.PositionService/CreatePosition"
const OperationPositionServiceDeletePosition = "/user_management.v1.PositionService/DeletePosition"
const OperationPositionServiceListPositions = "/user_management.v1.PositionService/ListPositions"
const OperationPositionServiceUpdatePosition = "/user_management.v1.PositionService/UpdatePosition"

type PositionServiceHTTPServer interface {
	// CreatePosition 新增岗位
	CreatePosition(context.Context, *CreatePositionRequest) (*CreatePositionResponse, error)
	// DeletePosition 删除岗位
	DeletePosition(context.Context, *DeletePositionRequest) (*DeletePositionResponse, error)
	// ListPositions 分页获取岗位列表
	ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error)
	// UpdatePosition 更新岗位
	UpdatePosition(context.Context, *UpdatePositionRequest) (*UpdatePositionResponse, error)
}

func RegisterPositionServiceHTTPServer(s *http.Server, srv PositionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/posts", _PositionService_CreatePosition0_HTTP_Handler(srv))
	r.PUT("/v1/posts", _PositionService_UpdatePosition0_HTTP_Handler(srv))
	r.DELETE("/v1/posts/{id}", _PositionService_DeletePosition0_HTTP_Handler(srv))
	r.GET("/v1/posts", _PositionService_ListPositions0_HTTP_Handler(srv))
}

func _PositionService_CreatePosition0_HTTP_Handler(srv PositionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePositionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPositionServiceCreatePosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePosition(ctx, req.(*CreatePositionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePositionResponse)
		return ctx.Result(200, reply)
	}
}

func _PositionService_UpdatePosition0_HTTP_Handler(srv PositionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePositionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPositionServiceUpdatePosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePosition(ctx, req.(*UpdatePositionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePositionResponse)
		return ctx.Result(200, reply)
	}
}

func _PositionService_DeletePosition0_HTTP_Handler(srv PositionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePositionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPositionServiceDeletePosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePosition(ctx, req.(*DeletePositionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePositionResponse)
		return ctx.Result(200, reply)
	}
}

func _PositionService_ListPositions0_HTTP_Handler(srv PositionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPositionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPositionServiceListPositions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPositions(ctx, req.(*ListPositionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPositionsResponse)
		return ctx.Result(200, reply)
	}
}

type PositionServiceHTTPClient interface {
	CreatePosition(ctx context.Context, req *CreatePositionRequest, opts ...http.CallOption) (rsp *CreatePositionResponse, err error)
	DeletePosition(ctx context.Context, req *DeletePositionRequest, opts ...http.CallOption) (rsp *DeletePositionResponse, err error)
	ListPositions(ctx context.Context, req *ListPositionsRequest, opts ...http.CallOption) (rsp *ListPositionsResponse, err error)
	UpdatePosition(ctx context.Context, req *UpdatePositionRequest, opts ...http.CallOption) (rsp *UpdatePositionResponse, err error)
}

type PositionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPositionServiceHTTPClient(client *http.Client) PositionServiceHTTPClient {
	return &PositionServiceHTTPClientImpl{client}
}

func (c *PositionServiceHTTPClientImpl) CreatePosition(ctx context.Context, in *CreatePositionRequest, opts ...http.CallOption) (*CreatePositionResponse, error) {
	var out CreatePositionResponse
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPositionServiceCreatePosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PositionServiceHTTPClientImpl) DeletePosition(ctx context.Context, in *DeletePositionRequest, opts ...http.CallOption) (*DeletePositionResponse, error) {
	var out DeletePositionResponse
	pattern := "/v1/posts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPositionServiceDeletePosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PositionServiceHTTPClientImpl) ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...http.CallOption) (*ListPositionsResponse, error) {
	var out ListPositionsResponse
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPositionServiceListPositions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PositionServiceHTTPClientImpl) UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...http.CallOption) (*UpdatePositionResponse, error) {
	var out UpdatePositionResponse
	pattern := "/v1/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPositionServiceUpdatePosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
