// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.0--rc1
// source: permission/v1/permission.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPermissionServiceBatchCheckPermission = "/permission.v1.PermissionService/BatchCheckPermission"
const OperationPermissionServiceCheckPermission = "/permission.v1.PermissionService/CheckPermission"
const OperationPermissionServiceCreatePolicy = "/permission.v1.PermissionService/CreatePolicy"
const OperationPermissionServiceDeletePolicy = "/permission.v1.PermissionService/DeletePolicy"
const OperationPermissionServiceListPolicies = "/permission.v1.PermissionService/ListPolicies"
const OperationPermissionServiceUpdatePolicy = "/permission.v1.PermissionService/UpdatePolicy"

type PermissionServiceHTTPServer interface {
	// BatchCheckPermission 批量检查权限
	BatchCheckPermission(context.Context, *BatchCheckPermissionRequest) (*BatchCheckPermissionResponse, error)
	// CheckPermission 检查权限
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	// CreatePolicy 创建策略
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// DeletePolicy 删除策略
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// ListPolicies 获取策略列表
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// UpdatePolicy 更新策略
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
}

func RegisterPermissionServiceHTTPServer(s *http.Server, srv PermissionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/policies", _PermissionService_CreatePolicy0_HTTP_Handler(srv))
	r.PUT("/v1/policies/{id}", _PermissionService_UpdatePolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/policies/{id}", _PermissionService_DeletePolicy0_HTTP_Handler(srv))
	r.GET("/v1/policies", _PermissionService_ListPolicies0_HTTP_Handler(srv))
	r.POST("/v1/permissions/check", _PermissionService_CheckPermission0_HTTP_Handler(srv))
	r.POST("/v1/permissions/batch-check", _PermissionService_BatchCheckPermission0_HTTP_Handler(srv))
}

func _PermissionService_CreatePolicy0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceCreatePolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePolicy(ctx, req.(*CreatePolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePolicyResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_UpdatePolicy0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceUpdatePolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePolicyResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_DeletePolicy0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceDeletePolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePolicy(ctx, req.(*DeletePolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePolicyResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_ListPolicies0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPoliciesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceListPolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPolicies(ctx, req.(*ListPoliciesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPoliciesResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_CheckPermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceCheckPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckPermission(ctx, req.(*CheckPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckPermissionResponse)
		return ctx.Result(200, reply)
	}
}

func _PermissionService_BatchCheckPermission0_HTTP_Handler(srv PermissionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCheckPermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPermissionServiceBatchCheckPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCheckPermission(ctx, req.(*BatchCheckPermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCheckPermissionResponse)
		return ctx.Result(200, reply)
	}
}

type PermissionServiceHTTPClient interface {
	BatchCheckPermission(ctx context.Context, req *BatchCheckPermissionRequest, opts ...http.CallOption) (rsp *BatchCheckPermissionResponse, err error)
	CheckPermission(ctx context.Context, req *CheckPermissionRequest, opts ...http.CallOption) (rsp *CheckPermissionResponse, err error)
	CreatePolicy(ctx context.Context, req *CreatePolicyRequest, opts ...http.CallOption) (rsp *CreatePolicyResponse, err error)
	DeletePolicy(ctx context.Context, req *DeletePolicyRequest, opts ...http.CallOption) (rsp *DeletePolicyResponse, err error)
	ListPolicies(ctx context.Context, req *ListPoliciesRequest, opts ...http.CallOption) (rsp *ListPoliciesResponse, err error)
	UpdatePolicy(ctx context.Context, req *UpdatePolicyRequest, opts ...http.CallOption) (rsp *UpdatePolicyResponse, err error)
}

type PermissionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPermissionServiceHTTPClient(client *http.Client) PermissionServiceHTTPClient {
	return &PermissionServiceHTTPClientImpl{client}
}

func (c *PermissionServiceHTTPClientImpl) BatchCheckPermission(ctx context.Context, in *BatchCheckPermissionRequest, opts ...http.CallOption) (*BatchCheckPermissionResponse, error) {
	var out BatchCheckPermissionResponse
	pattern := "/v1/permissions/batch-check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceBatchCheckPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...http.CallOption) (*CheckPermissionResponse, error) {
	var out CheckPermissionResponse
	pattern := "/v1/permissions/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceCheckPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...http.CallOption) (*CreatePolicyResponse, error) {
	var out CreatePolicyResponse
	pattern := "/v1/policies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceCreatePolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...http.CallOption) (*DeletePolicyResponse, error) {
	var out DeletePolicyResponse
	pattern := "/v1/policies/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionServiceDeletePolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...http.CallOption) (*ListPoliciesResponse, error) {
	var out ListPoliciesResponse
	pattern := "/v1/policies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPermissionServiceListPolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PermissionServiceHTTPClientImpl) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...http.CallOption) (*UpdatePolicyResponse, error) {
	var out UpdatePolicyResponse
	pattern := "/v1/policies/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPermissionServiceUpdatePolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
