// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DepartmentsColumns holds the columns for the "departments" table.
	DepartmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "parent_id", Type: field.TypeInt64, Comment: "Parent Department ID"},
		{Name: "name", Type: field.TypeString, Comment: "Name of the department"},
		{Name: "path", Type: field.TypeString},
		{Name: "attributes", Type: field.TypeJSON},
		{Name: "created_by", Type: field.TypeInt64, Nullable: true, Comment: "User who created this record"},
		{Name: "updated_by", Type: field.TypeInt64, Nullable: true, Comment: "User who last updated this record"},
		{Name: "created_at", Type: field.TypeTime, Comment: "Creation timestamp of this record"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Last update timestamp of this record"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "Timestamp when the record was deleted, if applicable"},
		{Name: "tenant_id", Type: field.TypeInt64, Comment: "Tenant ID"},
	}
	// DepartmentsTable holds the schema information for the "departments" table.
	DepartmentsTable = &schema.Table{
		Name:       "departments",
		Columns:    DepartmentsColumns,
		PrimaryKey: []*schema.Column{DepartmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "departments_tenants_departments",
				Columns:    []*schema.Column{DepartmentsColumns[10]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "Primary Key ID"},
		{Name: "name", Type: field.TypeString, Size: 128, Comment: "Name of the tenant"},
		{Name: "owner_id", Type: field.TypeInt64, Comment: "Owner user ID of the tenant"},
		{Name: "status", Type: field.TypeEnum, Comment: "Status of the tenant", Enums: []string{"ACTIVE", "DISABLED", "EXPIRED", "PENDING"}, Default: "PENDING"},
		{Name: "expired_at", Type: field.TypeTime, Nullable: true, Comment: "Expiration time of the tenant"},
		{Name: "attributes", Type: field.TypeJSON},
		{Name: "created_by", Type: field.TypeInt64, Nullable: true, Comment: "User who created this record"},
		{Name: "updated_by", Type: field.TypeInt64, Nullable: true, Comment: "User who last updated this record"},
		{Name: "created_at", Type: field.TypeTime, Comment: "Creation timestamp of this record"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Last update timestamp of this record"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "Timestamp when the record was deleted, if applicable"},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, Comment: "Primary Key ID"},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 64, Comment: "Username of the user"},
		{Name: "email", Type: field.TypeString, Unique: true, Comment: "Email address of the user"},
		{Name: "phone", Type: field.TypeString, Unique: true, Size: 16, Comment: "Phone number of the user"},
		{Name: "password", Type: field.TypeString, Comment: "Password of the user"},
		{Name: "status", Type: field.TypeEnum, Comment: "Status of the user", Enums: []string{"ACTIVE", "DISABLED", "PENDING"}, Default: "PENDING"},
		{Name: "full_name", Type: field.TypeString, Nullable: true, Comment: "Full name of the user"},
		{Name: "gender", Type: field.TypeEnum, Comment: "User gender", Enums: []string{"MALE", "FEMALE", "UNKNOWN"}, Default: "UNKNOWN"},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Comment: "Avatar URL of the user"},
		{Name: "language", Type: field.TypeString, Comment: "Preferred language of the user", Default: "en"},
		{Name: "timezone", Type: field.TypeString, Comment: "Preferred timezone of the user", Default: "Asia/Shanghai"},
		{Name: "created_by", Type: field.TypeInt64, Nullable: true, Comment: "User who created this record"},
		{Name: "updated_by", Type: field.TypeInt64, Nullable: true, Comment: "User who last updated this record"},
		{Name: "created_at", Type: field.TypeTime, Comment: "Creation timestamp of this record"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Last update timestamp of this record"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "Timestamp when the record was deleted, if applicable"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserAccountsColumns holds the columns for the "user_accounts" table.
	UserAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "platform", Type: field.TypeString, Comment: "Social media platform (e.g., Twitter, Facebook)"},
		{Name: "identifier", Type: field.TypeString, Comment: "User's account identifier on the platform"},
		{Name: "name", Type: field.TypeString, Comment: "User's name on the platform"},
		{Name: "created_at", Type: field.TypeTime, Comment: "Record creation timestamp"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Record last update timestamp"},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true, Comment: "Soft delete flag, null if not deleted"},
		{Name: "user_id", Type: field.TypeInt64, Comment: "Reference to SysUser ID"},
	}
	// UserAccountsTable holds the schema information for the "user_accounts" table.
	UserAccountsTable = &schema.Table{
		Name:       "user_accounts",
		Columns:    UserAccountsColumns,
		PrimaryKey: []*schema.Column{UserAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_accounts_users_accounts",
				Columns:    []*schema.Column{UserAccountsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "useraccount_user_id",
				Unique:  false,
				Columns: []*schema.Column{UserAccountsColumns[7]},
			},
			{
				Name:    "useraccount_platform_identifier",
				Unique:  true,
				Columns: []*schema.Column{UserAccountsColumns[1], UserAccountsColumns[2]},
			},
		},
	}
	// UserDepartmentsColumns holds the columns for the "user_departments" table.
	UserDepartmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "tenant_id", Type: field.TypeInt64, Comment: "Tenant ID"},
		{Name: "attributes", Type: field.TypeJSON},
		{Name: "dept_id", Type: field.TypeInt64, Comment: "Department ID"},
		{Name: "user_id", Type: field.TypeInt64, Comment: "SysUser ID"},
	}
	// UserDepartmentsTable holds the schema information for the "user_departments" table.
	UserDepartmentsTable = &schema.Table{
		Name:       "user_departments",
		Columns:    UserDepartmentsColumns,
		PrimaryKey: []*schema.Column{UserDepartmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_departments_departments_user_departments",
				Columns:    []*schema.Column{UserDepartmentsColumns[3]},
				RefColumns: []*schema.Column{DepartmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_departments_users_user_departments",
				Columns:    []*schema.Column{UserDepartmentsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserTenantsColumns holds the columns for the "user_tenants" table.
	UserTenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "role_labels", Type: field.TypeJSON, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt64, Comment: "Tenant ID"},
		{Name: "user_id", Type: field.TypeInt64, Comment: "SysUser ID"},
	}
	// UserTenantsTable holds the schema information for the "user_tenants" table.
	UserTenantsTable = &schema.Table{
		Name:       "user_tenants",
		Columns:    UserTenantsColumns,
		PrimaryKey: []*schema.Column{UserTenantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tenants_tenants_user_tenants",
				Columns:    []*schema.Column{UserTenantsColumns[2]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_tenants_users_user_tenants",
				Columns:    []*schema.Column{UserTenantsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DepartmentsTable,
		TenantsTable,
		UsersTable,
		UserAccountsTable,
		UserDepartmentsTable,
		UserTenantsTable,
	}
)

func init() {
	DepartmentsTable.ForeignKeys[0].RefTable = TenantsTable
	UserAccountsTable.ForeignKeys[0].RefTable = UsersTable
	UserDepartmentsTable.ForeignKeys[0].RefTable = DepartmentsTable
	UserDepartmentsTable.ForeignKeys[1].RefTable = UsersTable
	UserTenantsTable.ForeignKeys[0].RefTable = TenantsTable
	UserTenantsTable.ForeignKeys[1].RefTable = UsersTable
}
