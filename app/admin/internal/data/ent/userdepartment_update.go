// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/userdepartment"
)

// UserDepartmentUpdate is the builder for updating UserDepartment entities.
type UserDepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *UserDepartmentMutation
}

// Where appends a list predicates to the UserDepartmentUpdate builder.
func (udu *UserDepartmentUpdate) Where(ps ...predicate.UserDepartment) *UserDepartmentUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetUserID sets the "user_id" field.
func (udu *UserDepartmentUpdate) SetUserID(i int64) *UserDepartmentUpdate {
	udu.mutation.SetUserID(i)
	return udu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udu *UserDepartmentUpdate) SetNillableUserID(i *int64) *UserDepartmentUpdate {
	if i != nil {
		udu.SetUserID(*i)
	}
	return udu
}

// SetDeptID sets the "dept_id" field.
func (udu *UserDepartmentUpdate) SetDeptID(i int64) *UserDepartmentUpdate {
	udu.mutation.SetDeptID(i)
	return udu
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (udu *UserDepartmentUpdate) SetNillableDeptID(i *int64) *UserDepartmentUpdate {
	if i != nil {
		udu.SetDeptID(*i)
	}
	return udu
}

// SetTenantID sets the "tenant_id" field.
func (udu *UserDepartmentUpdate) SetTenantID(i int64) *UserDepartmentUpdate {
	udu.mutation.ResetTenantID()
	udu.mutation.SetTenantID(i)
	return udu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (udu *UserDepartmentUpdate) SetNillableTenantID(i *int64) *UserDepartmentUpdate {
	if i != nil {
		udu.SetTenantID(*i)
	}
	return udu
}

// AddTenantID adds i to the "tenant_id" field.
func (udu *UserDepartmentUpdate) AddTenantID(i int64) *UserDepartmentUpdate {
	udu.mutation.AddTenantID(i)
	return udu
}

// SetAttributes sets the "attributes" field.
func (udu *UserDepartmentUpdate) SetAttributes(m map[string]interface{}) *UserDepartmentUpdate {
	udu.mutation.SetAttributes(m)
	return udu
}

// SetUser sets the "user" edge to the SysUser entity.
func (udu *UserDepartmentUpdate) SetUser(s *SysUser) *UserDepartmentUpdate {
	return udu.SetUserID(s.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (udu *UserDepartmentUpdate) SetDepartmentID(id int64) *UserDepartmentUpdate {
	udu.mutation.SetDepartmentID(id)
	return udu
}

// SetDepartment sets the "department" edge to the Department entity.
func (udu *UserDepartmentUpdate) SetDepartment(d *Department) *UserDepartmentUpdate {
	return udu.SetDepartmentID(d.ID)
}

// Mutation returns the UserDepartmentMutation object of the builder.
func (udu *UserDepartmentUpdate) Mutation() *UserDepartmentMutation {
	return udu.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (udu *UserDepartmentUpdate) ClearUser() *UserDepartmentUpdate {
	udu.mutation.ClearUser()
	return udu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (udu *UserDepartmentUpdate) ClearDepartment() *UserDepartmentUpdate {
	udu.mutation.ClearDepartment()
	return udu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDepartmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDepartmentUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDepartmentUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDepartmentUpdate) check() error {
	if udu.mutation.UserCleared() && len(udu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserDepartment.user"`)
	}
	if udu.mutation.DepartmentCleared() && len(udu.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserDepartment.department"`)
	}
	return nil
}

func (udu *UserDepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdepartment.Table, userdepartment.Columns, sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.TenantID(); ok {
		_spec.SetField(userdepartment.FieldTenantID, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.AddedTenantID(); ok {
		_spec.AddField(userdepartment.FieldTenantID, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.Attributes(); ok {
		_spec.SetField(userdepartment.FieldAttributes, field.TypeJSON, value)
	}
	if udu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if udu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdepartment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDepartmentUpdateOne is the builder for updating a single UserDepartment entity.
type UserDepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDepartmentMutation
}

// SetUserID sets the "user_id" field.
func (uduo *UserDepartmentUpdateOne) SetUserID(i int64) *UserDepartmentUpdateOne {
	uduo.mutation.SetUserID(i)
	return uduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uduo *UserDepartmentUpdateOne) SetNillableUserID(i *int64) *UserDepartmentUpdateOne {
	if i != nil {
		uduo.SetUserID(*i)
	}
	return uduo
}

// SetDeptID sets the "dept_id" field.
func (uduo *UserDepartmentUpdateOne) SetDeptID(i int64) *UserDepartmentUpdateOne {
	uduo.mutation.SetDeptID(i)
	return uduo
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (uduo *UserDepartmentUpdateOne) SetNillableDeptID(i *int64) *UserDepartmentUpdateOne {
	if i != nil {
		uduo.SetDeptID(*i)
	}
	return uduo
}

// SetTenantID sets the "tenant_id" field.
func (uduo *UserDepartmentUpdateOne) SetTenantID(i int64) *UserDepartmentUpdateOne {
	uduo.mutation.ResetTenantID()
	uduo.mutation.SetTenantID(i)
	return uduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uduo *UserDepartmentUpdateOne) SetNillableTenantID(i *int64) *UserDepartmentUpdateOne {
	if i != nil {
		uduo.SetTenantID(*i)
	}
	return uduo
}

// AddTenantID adds i to the "tenant_id" field.
func (uduo *UserDepartmentUpdateOne) AddTenantID(i int64) *UserDepartmentUpdateOne {
	uduo.mutation.AddTenantID(i)
	return uduo
}

// SetAttributes sets the "attributes" field.
func (uduo *UserDepartmentUpdateOne) SetAttributes(m map[string]interface{}) *UserDepartmentUpdateOne {
	uduo.mutation.SetAttributes(m)
	return uduo
}

// SetUser sets the "user" edge to the SysUser entity.
func (uduo *UserDepartmentUpdateOne) SetUser(s *SysUser) *UserDepartmentUpdateOne {
	return uduo.SetUserID(s.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (uduo *UserDepartmentUpdateOne) SetDepartmentID(id int64) *UserDepartmentUpdateOne {
	uduo.mutation.SetDepartmentID(id)
	return uduo
}

// SetDepartment sets the "department" edge to the Department entity.
func (uduo *UserDepartmentUpdateOne) SetDepartment(d *Department) *UserDepartmentUpdateOne {
	return uduo.SetDepartmentID(d.ID)
}

// Mutation returns the UserDepartmentMutation object of the builder.
func (uduo *UserDepartmentUpdateOne) Mutation() *UserDepartmentMutation {
	return uduo.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (uduo *UserDepartmentUpdateOne) ClearUser() *UserDepartmentUpdateOne {
	uduo.mutation.ClearUser()
	return uduo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (uduo *UserDepartmentUpdateOne) ClearDepartment() *UserDepartmentUpdateOne {
	uduo.mutation.ClearDepartment()
	return uduo
}

// Where appends a list predicates to the UserDepartmentUpdate builder.
func (uduo *UserDepartmentUpdateOne) Where(ps ...predicate.UserDepartment) *UserDepartmentUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDepartmentUpdateOne) Select(field string, fields ...string) *UserDepartmentUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDepartment entity.
func (uduo *UserDepartmentUpdateOne) Save(ctx context.Context) (*UserDepartment, error) {
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDepartmentUpdateOne) SaveX(ctx context.Context) *UserDepartment {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDepartmentUpdateOne) check() error {
	if uduo.mutation.UserCleared() && len(uduo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserDepartment.user"`)
	}
	if uduo.mutation.DepartmentCleared() && len(uduo.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserDepartment.department"`)
	}
	return nil
}

func (uduo *UserDepartmentUpdateOne) sqlSave(ctx context.Context) (_node *UserDepartment, err error) {
	if err := uduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdepartment.Table, userdepartment.Columns, sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDepartment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdepartment.FieldID)
		for _, f := range fields {
			if !userdepartment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdepartment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.TenantID(); ok {
		_spec.SetField(userdepartment.FieldTenantID, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.AddedTenantID(); ok {
		_spec.AddField(userdepartment.FieldTenantID, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.Attributes(); ok {
		_spec.SetField(userdepartment.FieldAttributes, field.TypeJSON, value)
	}
	if uduo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uduo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserDepartment{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdepartment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
