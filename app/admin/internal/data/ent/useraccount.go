// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/user"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/useraccount"
)

// UserAccount is the model entity for the UserAccount schema.
type UserAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Reference to SysUser ID
	UserID int64 `json:"user_id,omitempty"`
	// Social media platform (e.g., Twitter, Facebook)
	Platform string `json:"platform,omitempty"`
	// User's account identifier on the platform
	Identifier string `json:"identifier,omitempty"`
	// User's name on the platform
	Name *string `json:"name,omitempty"`
	// Record creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Record last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Soft delete flag, null if not deleted
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAccountQuery when eager-loading is set.
	Edges        UserAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAccountEdges holds the relations/edges for other nodes in the graph.
type UserAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccountEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldID, useraccount.FieldUserID:
			values[i] = new(sql.NullInt64)
		case useraccount.FieldPlatform, useraccount.FieldIdentifier, useraccount.FieldName:
			values[i] = new(sql.NullString)
		case useraccount.FieldCreatedAt, useraccount.FieldUpdatedAt, useraccount.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAccount fields.
func (ua *UserAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case useraccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ua.UserID = value.Int64
			}
		case useraccount.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ua.Platform = value.String
			}
		case useraccount.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				ua.Identifier = value.String
			}
		case useraccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ua.Name = new(string)
				*ua.Name = value.String
			}
		case useraccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ua.CreatedAt = value.Time
			}
		case useraccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ua.UpdatedAt = value.Time
			}
		case useraccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ua.DeletedAt = new(time.Time)
				*ua.DeletedAt = value.Time
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAccount.
// This includes values selected through modifiers, order, etc.
func (ua *UserAccount) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAccount entity.
func (ua *UserAccount) QueryUser() *UserQuery {
	return NewUserAccountClient(ua.config).QueryUser(ua)
}

// Update returns a builder for updating this UserAccount.
// Note that you need to call UserAccount.Unwrap() before calling this method if this UserAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAccount) Update() *UserAccountUpdateOne {
	return NewUserAccountClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAccount) Unwrap() *UserAccount {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAccount is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAccount) String() string {
	var builder strings.Builder
	builder.WriteString("UserAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(ua.Platform)
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(ua.Identifier)
	builder.WriteString(", ")
	if v := ua.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ua.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ua.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ua.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// UserAccounts is a parsable slice of UserAccount.
type UserAccounts []*UserAccount
