// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/user"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/userdepartment"
)

// UserDepartmentCreate is the builder for creating a UserDepartment entity.
type UserDepartmentCreate struct {
	config
	mutation *UserDepartmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (udc *UserDepartmentCreate) SetUserID(i int64) *UserDepartmentCreate {
	udc.mutation.SetUserID(i)
	return udc
}

// SetDeptID sets the "dept_id" field.
func (udc *UserDepartmentCreate) SetDeptID(i int64) *UserDepartmentCreate {
	udc.mutation.SetDeptID(i)
	return udc
}

// SetTenantID sets the "tenant_id" field.
func (udc *UserDepartmentCreate) SetTenantID(i int64) *UserDepartmentCreate {
	udc.mutation.SetTenantID(i)
	return udc
}

// SetAttributes sets the "attributes" field.
func (udc *UserDepartmentCreate) SetAttributes(m map[string]interface{}) *UserDepartmentCreate {
	udc.mutation.SetAttributes(m)
	return udc
}

// SetID sets the "id" field.
func (udc *UserDepartmentCreate) SetID(i int64) *UserDepartmentCreate {
	udc.mutation.SetID(i)
	return udc
}

// SetUser sets the "user" edge to the User entity.
func (udc *UserDepartmentCreate) SetUser(u *User) *UserDepartmentCreate {
	return udc.SetUserID(u.ID)
}

// SetDepartmentID sets the "department" edge to the Department entity by ID.
func (udc *UserDepartmentCreate) SetDepartmentID(id int64) *UserDepartmentCreate {
	udc.mutation.SetDepartmentID(id)
	return udc
}

// SetDepartment sets the "department" edge to the Department entity.
func (udc *UserDepartmentCreate) SetDepartment(d *Department) *UserDepartmentCreate {
	return udc.SetDepartmentID(d.ID)
}

// Mutation returns the UserDepartmentMutation object of the builder.
func (udc *UserDepartmentCreate) Mutation() *UserDepartmentMutation {
	return udc.mutation
}

// Save creates the UserDepartment in the database.
func (udc *UserDepartmentCreate) Save(ctx context.Context) (*UserDepartment, error) {
	udc.defaults()
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDepartmentCreate) SaveX(ctx context.Context) *UserDepartment {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDepartmentCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDepartmentCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udc *UserDepartmentCreate) defaults() {
	if _, ok := udc.mutation.Attributes(); !ok {
		v := userdepartment.DefaultAttributes
		udc.mutation.SetAttributes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDepartmentCreate) check() error {
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserDepartment.user_id"`)}
	}
	if _, ok := udc.mutation.DeptID(); !ok {
		return &ValidationError{Name: "dept_id", err: errors.New(`ent: missing required field "UserDepartment.dept_id"`)}
	}
	if _, ok := udc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "UserDepartment.tenant_id"`)}
	}
	if _, ok := udc.mutation.Attributes(); !ok {
		return &ValidationError{Name: "attributes", err: errors.New(`ent: missing required field "UserDepartment.attributes"`)}
	}
	if len(udc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserDepartment.user"`)}
	}
	if len(udc.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required edge "UserDepartment.department"`)}
	}
	return nil
}

func (udc *UserDepartmentCreate) sqlSave(ctx context.Context) (*UserDepartment, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UserDepartmentCreate) createSpec() (*UserDepartment, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDepartment{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(userdepartment.Table, sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = udc.conflict
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.TenantID(); ok {
		_spec.SetField(userdepartment.FieldTenantID, field.TypeInt64, value)
		_node.TenantID = value
	}
	if value, ok := udc.mutation.Attributes(); ok {
		_spec.SetField(userdepartment.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if nodes := udc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.UserTable,
			Columns: []string{userdepartment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := udc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdepartment.DepartmentTable,
			Columns: []string{userdepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeptID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserDepartment.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserDepartmentUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (udc *UserDepartmentCreate) OnConflict(opts ...sql.ConflictOption) *UserDepartmentUpsertOne {
	udc.conflict = opts
	return &UserDepartmentUpsertOne{
		create: udc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (udc *UserDepartmentCreate) OnConflictColumns(columns ...string) *UserDepartmentUpsertOne {
	udc.conflict = append(udc.conflict, sql.ConflictColumns(columns...))
	return &UserDepartmentUpsertOne{
		create: udc,
	}
}

type (
	// UserDepartmentUpsertOne is the builder for "upsert"-ing
	//  one UserDepartment node.
	UserDepartmentUpsertOne struct {
		create *UserDepartmentCreate
	}

	// UserDepartmentUpsert is the "OnConflict" setter.
	UserDepartmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserDepartmentUpsert) SetUserID(v int64) *UserDepartmentUpsert {
	u.Set(userdepartment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDepartmentUpsert) UpdateUserID() *UserDepartmentUpsert {
	u.SetExcluded(userdepartment.FieldUserID)
	return u
}

// SetDeptID sets the "dept_id" field.
func (u *UserDepartmentUpsert) SetDeptID(v int64) *UserDepartmentUpsert {
	u.Set(userdepartment.FieldDeptID, v)
	return u
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *UserDepartmentUpsert) UpdateDeptID() *UserDepartmentUpsert {
	u.SetExcluded(userdepartment.FieldDeptID)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserDepartmentUpsert) SetTenantID(v int64) *UserDepartmentUpsert {
	u.Set(userdepartment.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserDepartmentUpsert) UpdateTenantID() *UserDepartmentUpsert {
	u.SetExcluded(userdepartment.FieldTenantID)
	return u
}

// AddTenantID adds v to the "tenant_id" field.
func (u *UserDepartmentUpsert) AddTenantID(v int64) *UserDepartmentUpsert {
	u.Add(userdepartment.FieldTenantID, v)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *UserDepartmentUpsert) SetAttributes(v map[string]interface{}) *UserDepartmentUpsert {
	u.Set(userdepartment.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *UserDepartmentUpsert) UpdateAttributes() *UserDepartmentUpsert {
	u.SetExcluded(userdepartment.FieldAttributes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userdepartment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserDepartmentUpsertOne) UpdateNewValues() *UserDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userdepartment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserDepartmentUpsertOne) Ignore() *UserDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserDepartmentUpsertOne) DoNothing() *UserDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserDepartmentCreate.OnConflict
// documentation for more info.
func (u *UserDepartmentUpsertOne) Update(set func(*UserDepartmentUpsert)) *UserDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserDepartmentUpsertOne) SetUserID(v int64) *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertOne) UpdateUserID() *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateUserID()
	})
}

// SetDeptID sets the "dept_id" field.
func (u *UserDepartmentUpsertOne) SetDeptID(v int64) *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetDeptID(v)
	})
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertOne) UpdateDeptID() *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateDeptID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *UserDepartmentUpsertOne) SetTenantID(v int64) *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *UserDepartmentUpsertOne) AddTenantID(v int64) *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertOne) UpdateTenantID() *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateTenantID()
	})
}

// SetAttributes sets the "attributes" field.
func (u *UserDepartmentUpsertOne) SetAttributes(v map[string]interface{}) *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *UserDepartmentUpsertOne) UpdateAttributes() *UserDepartmentUpsertOne {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateAttributes()
	})
}

// Exec executes the query.
func (u *UserDepartmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserDepartmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserDepartmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserDepartmentUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserDepartmentUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserDepartmentCreateBulk is the builder for creating many UserDepartment entities in bulk.
type UserDepartmentCreateBulk struct {
	config
	err      error
	builders []*UserDepartmentCreate
	conflict []sql.ConflictOption
}

// Save creates the UserDepartment entities in the database.
func (udcb *UserDepartmentCreateBulk) Save(ctx context.Context) ([]*UserDepartment, error) {
	if udcb.err != nil {
		return nil, udcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDepartment, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = udcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDepartmentCreateBulk) SaveX(ctx context.Context) []*UserDepartment {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDepartmentCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDepartmentCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserDepartment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserDepartmentUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (udcb *UserDepartmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserDepartmentUpsertBulk {
	udcb.conflict = opts
	return &UserDepartmentUpsertBulk{
		create: udcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (udcb *UserDepartmentCreateBulk) OnConflictColumns(columns ...string) *UserDepartmentUpsertBulk {
	udcb.conflict = append(udcb.conflict, sql.ConflictColumns(columns...))
	return &UserDepartmentUpsertBulk{
		create: udcb,
	}
}

// UserDepartmentUpsertBulk is the builder for "upsert"-ing
// a bulk of UserDepartment nodes.
type UserDepartmentUpsertBulk struct {
	create *UserDepartmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userdepartment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserDepartmentUpsertBulk) UpdateNewValues() *UserDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userdepartment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserDepartment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserDepartmentUpsertBulk) Ignore() *UserDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserDepartmentUpsertBulk) DoNothing() *UserDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserDepartmentCreateBulk.OnConflict
// documentation for more info.
func (u *UserDepartmentUpsertBulk) Update(set func(*UserDepartmentUpsert)) *UserDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserDepartmentUpsertBulk) SetUserID(v int64) *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertBulk) UpdateUserID() *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateUserID()
	})
}

// SetDeptID sets the "dept_id" field.
func (u *UserDepartmentUpsertBulk) SetDeptID(v int64) *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetDeptID(v)
	})
}

// UpdateDeptID sets the "dept_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertBulk) UpdateDeptID() *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateDeptID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *UserDepartmentUpsertBulk) SetTenantID(v int64) *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetTenantID(v)
	})
}

// AddTenantID adds v to the "tenant_id" field.
func (u *UserDepartmentUpsertBulk) AddTenantID(v int64) *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.AddTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserDepartmentUpsertBulk) UpdateTenantID() *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateTenantID()
	})
}

// SetAttributes sets the "attributes" field.
func (u *UserDepartmentUpsertBulk) SetAttributes(v map[string]interface{}) *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *UserDepartmentUpsertBulk) UpdateAttributes() *UserDepartmentUpsertBulk {
	return u.Update(func(s *UserDepartmentUpsert) {
		s.UpdateAttributes()
	})
}

// Exec executes the query.
func (u *UserDepartmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserDepartmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserDepartmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserDepartmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
