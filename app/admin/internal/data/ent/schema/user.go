package schema

import (
	"context"
	"errors"
	"regexp"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/hook"
	"github.com/yc-alpha/admin/common/snowflake"
	"golang.org/x/crypto/bcrypt"
)

const (
	DefaultLanguage = "en"
	DefaultTimezone = "Asia/Shanghai"
)

var (
	EmailRegex    = regexp.MustCompile(`^[^\s@]+@[^\s@]+\.[^\s@]+$`) // 基本 email 格式校验
	PhoneRegex    = regexp.MustCompile(`^\+[1-9]\d{1,14}$`)          // E.164 国际手机号格式，例如 +8613812345678
	LanguageRegex = regexp.MustCompile(`^(en|zh|fr|es|de|ja|ko)$`)
)

func IsValidTimeZone(timezone string) error {
	// Validate that the timezone is a valid IANA timezone
	if _, err := time.LoadLocation(timezone); err != nil {
		return err
	}
	return nil
}

// User holds the schema definition for the User entity.
type User struct {
	ent.Schema
}

// Fields of the SysUser.
func (User) Fields() []ent.Field {
	return []ent.Field{
		field.Int64("id").Unique().Immutable().DefaultFunc(snowflake.GenId).Comment("Primary Key ID"),
		field.String("username").MaxLen(64).NotEmpty().Unique().Comment("Username of the user"),
		field.String("email").Match(EmailRegex).NotEmpty().Nillable().Unique().Comment("Email address of the user"),
		field.String("phone").Match(PhoneRegex).MaxLen(16).NotEmpty().Nillable().Unique().Comment("Phone number of the user"),
		field.String("password").NotEmpty().Nillable().Sensitive().Comment("Password of the user"),
		field.Enum("status").Values("ACTIVE", "DISABLED", "PENDING").Default("PENDING").Comment("Status of the user"),
		field.String("full_name").Optional().Nillable().Comment("Full name of the user"),
		field.Enum("gender").Values("MALE", "FEMALE", "UNKNOWN").Default("UNKNOWN").Comment("User gender"),
		field.String("avatar").Optional().Nillable().Comment("Avatar URL of the user"),
		field.String("language").Default(DefaultLanguage).Match(LanguageRegex).Comment("Preferred language of the user"),
		field.String("timezone").Default(DefaultTimezone).Validate(IsValidTimeZone).Comment("Preferred timezone of the user"),
		field.Int64("created_by").Optional().Nillable().Comment("User who created this record"),
		field.Int64("updated_by").Optional().Nillable().Comment("User who last updated this record"),
		field.Time("created_at").Default(time.Now).Immutable().Comment("Creation timestamp of this record"),
		field.Time("updated_at").Default(time.Now).UpdateDefault(time.Now).Comment("Last update timestamp of this record"),
		field.Time("deleted_at").Optional().Nillable().Comment("Timestamp when the record was deleted, if applicable"),
	}
}

// Edges of the User.
func (User) Edges() []ent.Edge {
	return []ent.Edge{
		edge.To("accounts", UserAccount.Type).Annotations(entsql.OnDelete(entsql.Cascade)),
		edge.To("user_tenants", UserTenant.Type).Annotations(entsql.OnDelete(entsql.Cascade)),
		edge.To("user_departments", UserDepartment.Type).Annotations(entsql.OnDelete(entsql.Cascade)),
	}
}

func (User) Annotations() []schema.Annotation {
	// 把 WithComments 放这里，ent 在迁移时会把 field.Comment 写入 DB
	return []schema.Annotation{
		entsql.WithComments(true),
		// 你也可以在这里设置表名、表注释等 entsql.Table / entsql.View 等
	}
}

// Hooks of the User.
func (User) Hooks() []ent.Hook {
	return []ent.Hook{
		hook.On(func(next ent.Mutator) ent.Mutator {
			return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
				// hashes the password before saving it to the database.
				if password, ok := m.Field("password"); ok && password != nil {
					if passStr, ok := password.(string); ok {
						// Hash the password before saving
						hashedPassword, err := bcrypt.GenerateFromPassword([]byte(passStr), bcrypt.DefaultCost)
						if err != nil {
							return nil, err
						}
						// There is no need to convert the encrypted password of bcrypt to Base64 and store
						// it in the database. The hash generated by bcrypt is essentially Base64 encoded, and
						// Base64 conversion does not enhance security.
						m.SetField("password", string(hashedPassword))
					} else {
						return nil, errors.New("password must be a string")
					}
				}
				// language 字段处理
				if lang, ok := m.Field("language"); ok {
					if langStr, ok := lang.(string); ok && langStr == "" {
						m.SetField("language", DefaultLanguage)
					}
				}
				// timezone 字段处理
				if tz, ok := m.Field("timezone"); ok {
					if tzStr, ok := tz.(string); ok && tzStr == "" {
						m.SetField("timezone", DefaultTimezone)
					}
				}
				return next.Mutate(ctx, m)
			})
		}, ent.OpCreate|ent.OpUpdate|ent.OpUpdateOne),
	}
}
