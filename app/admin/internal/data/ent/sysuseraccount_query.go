// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuseraccount"
)

// SysUserAccountQuery is the builder for querying SysUserAccount entities.
type SysUserAccountQuery struct {
	config
	ctx        *QueryContext
	order      []sysuseraccount.OrderOption
	inters     []Interceptor
	predicates []predicate.SysUserAccount
	withUser   *SysUserQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysUserAccountQuery builder.
func (suaq *SysUserAccountQuery) Where(ps ...predicate.SysUserAccount) *SysUserAccountQuery {
	suaq.predicates = append(suaq.predicates, ps...)
	return suaq
}

// Limit the number of records to be returned by this query.
func (suaq *SysUserAccountQuery) Limit(limit int) *SysUserAccountQuery {
	suaq.ctx.Limit = &limit
	return suaq
}

// Offset to start from.
func (suaq *SysUserAccountQuery) Offset(offset int) *SysUserAccountQuery {
	suaq.ctx.Offset = &offset
	return suaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (suaq *SysUserAccountQuery) Unique(unique bool) *SysUserAccountQuery {
	suaq.ctx.Unique = &unique
	return suaq
}

// Order specifies how the records should be ordered.
func (suaq *SysUserAccountQuery) Order(o ...sysuseraccount.OrderOption) *SysUserAccountQuery {
	suaq.order = append(suaq.order, o...)
	return suaq
}

// QueryUser chains the current query on the "user" edge.
func (suaq *SysUserAccountQuery) QueryUser() *SysUserQuery {
	query := (&SysUserClient{config: suaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuseraccount.Table, sysuseraccount.FieldID, selector),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysuseraccount.UserTable, sysuseraccount.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(suaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SysUserAccount entity from the query.
// Returns a *NotFoundError when no SysUserAccount was found.
func (suaq *SysUserAccountQuery) First(ctx context.Context) (*SysUserAccount, error) {
	nodes, err := suaq.Limit(1).All(setContextOp(ctx, suaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysuseraccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (suaq *SysUserAccountQuery) FirstX(ctx context.Context) *SysUserAccount {
	node, err := suaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysUserAccount ID from the query.
// Returns a *NotFoundError when no SysUserAccount ID was found.
func (suaq *SysUserAccountQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = suaq.Limit(1).IDs(setContextOp(ctx, suaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysuseraccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (suaq *SysUserAccountQuery) FirstIDX(ctx context.Context) int {
	id, err := suaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysUserAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysUserAccount entity is found.
// Returns a *NotFoundError when no SysUserAccount entities are found.
func (suaq *SysUserAccountQuery) Only(ctx context.Context) (*SysUserAccount, error) {
	nodes, err := suaq.Limit(2).All(setContextOp(ctx, suaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysuseraccount.Label}
	default:
		return nil, &NotSingularError{sysuseraccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (suaq *SysUserAccountQuery) OnlyX(ctx context.Context) *SysUserAccount {
	node, err := suaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysUserAccount ID in the query.
// Returns a *NotSingularError when more than one SysUserAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (suaq *SysUserAccountQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = suaq.Limit(2).IDs(setContextOp(ctx, suaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysuseraccount.Label}
	default:
		err = &NotSingularError{sysuseraccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (suaq *SysUserAccountQuery) OnlyIDX(ctx context.Context) int {
	id, err := suaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysUserAccounts.
func (suaq *SysUserAccountQuery) All(ctx context.Context) ([]*SysUserAccount, error) {
	ctx = setContextOp(ctx, suaq.ctx, ent.OpQueryAll)
	if err := suaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SysUserAccount, *SysUserAccountQuery]()
	return withInterceptors[[]*SysUserAccount](ctx, suaq, qr, suaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (suaq *SysUserAccountQuery) AllX(ctx context.Context) []*SysUserAccount {
	nodes, err := suaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysUserAccount IDs.
func (suaq *SysUserAccountQuery) IDs(ctx context.Context) (ids []int, err error) {
	if suaq.ctx.Unique == nil && suaq.path != nil {
		suaq.Unique(true)
	}
	ctx = setContextOp(ctx, suaq.ctx, ent.OpQueryIDs)
	if err = suaq.Select(sysuseraccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (suaq *SysUserAccountQuery) IDsX(ctx context.Context) []int {
	ids, err := suaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (suaq *SysUserAccountQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, suaq.ctx, ent.OpQueryCount)
	if err := suaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, suaq, querierCount[*SysUserAccountQuery](), suaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (suaq *SysUserAccountQuery) CountX(ctx context.Context) int {
	count, err := suaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (suaq *SysUserAccountQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, suaq.ctx, ent.OpQueryExist)
	switch _, err := suaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (suaq *SysUserAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := suaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysUserAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (suaq *SysUserAccountQuery) Clone() *SysUserAccountQuery {
	if suaq == nil {
		return nil
	}
	return &SysUserAccountQuery{
		config:     suaq.config,
		ctx:        suaq.ctx.Clone(),
		order:      append([]sysuseraccount.OrderOption{}, suaq.order...),
		inters:     append([]Interceptor{}, suaq.inters...),
		predicates: append([]predicate.SysUserAccount{}, suaq.predicates...),
		withUser:   suaq.withUser.Clone(),
		// clone intermediate query.
		sql:  suaq.sql.Clone(),
		path: suaq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (suaq *SysUserAccountQuery) WithUser(opts ...func(*SysUserQuery)) *SysUserAccountQuery {
	query := (&SysUserClient{config: suaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	suaq.withUser = query
	return suaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysUserAccount.Query().
//		GroupBy(sysuseraccount.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (suaq *SysUserAccountQuery) GroupBy(field string, fields ...string) *SysUserAccountGroupBy {
	suaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SysUserAccountGroupBy{build: suaq}
	grbuild.flds = &suaq.ctx.Fields
	grbuild.label = sysuseraccount.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//	}
//
//	client.SysUserAccount.Query().
//		Select(sysuseraccount.FieldUserID).
//		Scan(ctx, &v)
func (suaq *SysUserAccountQuery) Select(fields ...string) *SysUserAccountSelect {
	suaq.ctx.Fields = append(suaq.ctx.Fields, fields...)
	sbuild := &SysUserAccountSelect{SysUserAccountQuery: suaq}
	sbuild.label = sysuseraccount.Label
	sbuild.flds, sbuild.scan = &suaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SysUserAccountSelect configured with the given aggregations.
func (suaq *SysUserAccountQuery) Aggregate(fns ...AggregateFunc) *SysUserAccountSelect {
	return suaq.Select().Aggregate(fns...)
}

func (suaq *SysUserAccountQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range suaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, suaq); err != nil {
				return err
			}
		}
	}
	for _, f := range suaq.ctx.Fields {
		if !sysuseraccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if suaq.path != nil {
		prev, err := suaq.path(ctx)
		if err != nil {
			return err
		}
		suaq.sql = prev
	}
	return nil
}

func (suaq *SysUserAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysUserAccount, error) {
	var (
		nodes       = []*SysUserAccount{}
		_spec       = suaq.querySpec()
		loadedTypes = [1]bool{
			suaq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysUserAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysUserAccount{config: suaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(suaq.modifiers) > 0 {
		_spec.Modifiers = suaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, suaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := suaq.withUser; query != nil {
		if err := suaq.loadUser(ctx, query, nodes, nil,
			func(n *SysUserAccount, e *SysUser) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (suaq *SysUserAccountQuery) loadUser(ctx context.Context, query *SysUserQuery, nodes []*SysUserAccount, init func(*SysUserAccount), assign func(*SysUserAccount, *SysUser)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*SysUserAccount)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sysuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (suaq *SysUserAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := suaq.querySpec()
	if len(suaq.modifiers) > 0 {
		_spec.Modifiers = suaq.modifiers
	}
	_spec.Node.Columns = suaq.ctx.Fields
	if len(suaq.ctx.Fields) > 0 {
		_spec.Unique = suaq.ctx.Unique != nil && *suaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, suaq.driver, _spec)
}

func (suaq *SysUserAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sysuseraccount.Table, sysuseraccount.Columns, sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt))
	_spec.From = suaq.sql
	if unique := suaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if suaq.path != nil {
		_spec.Unique = true
	}
	if fields := suaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuseraccount.FieldID)
		for i := range fields {
			if fields[i] != sysuseraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if suaq.withUser != nil {
			_spec.Node.AddColumnOnce(sysuseraccount.FieldUserID)
		}
	}
	if ps := suaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := suaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := suaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := suaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (suaq *SysUserAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(suaq.driver.Dialect())
	t1 := builder.Table(sysuseraccount.Table)
	columns := suaq.ctx.Fields
	if len(columns) == 0 {
		columns = sysuseraccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if suaq.sql != nil {
		selector = suaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if suaq.ctx.Unique != nil && *suaq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range suaq.modifiers {
		m(selector)
	}
	for _, p := range suaq.predicates {
		p(selector)
	}
	for _, p := range suaq.order {
		p(selector)
	}
	if offset := suaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := suaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (suaq *SysUserAccountQuery) ForUpdate(opts ...sql.LockOption) *SysUserAccountQuery {
	if suaq.driver.Dialect() == dialect.Postgres {
		suaq.Unique(false)
	}
	suaq.modifiers = append(suaq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return suaq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (suaq *SysUserAccountQuery) ForShare(opts ...sql.LockOption) *SysUserAccountQuery {
	if suaq.driver.Dialect() == dialect.Postgres {
		suaq.Unique(false)
	}
	suaq.modifiers = append(suaq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return suaq
}

// SysUserAccountGroupBy is the group-by builder for SysUserAccount entities.
type SysUserAccountGroupBy struct {
	selector
	build *SysUserAccountQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (suagb *SysUserAccountGroupBy) Aggregate(fns ...AggregateFunc) *SysUserAccountGroupBy {
	suagb.fns = append(suagb.fns, fns...)
	return suagb
}

// Scan applies the selector query and scans the result into the given value.
func (suagb *SysUserAccountGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, suagb.build.ctx, ent.OpQueryGroupBy)
	if err := suagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysUserAccountQuery, *SysUserAccountGroupBy](ctx, suagb.build, suagb, suagb.build.inters, v)
}

func (suagb *SysUserAccountGroupBy) sqlScan(ctx context.Context, root *SysUserAccountQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(suagb.fns))
	for _, fn := range suagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*suagb.flds)+len(suagb.fns))
		for _, f := range *suagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*suagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := suagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SysUserAccountSelect is the builder for selecting fields of SysUserAccount entities.
type SysUserAccountSelect struct {
	*SysUserAccountQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (suas *SysUserAccountSelect) Aggregate(fns ...AggregateFunc) *SysUserAccountSelect {
	suas.fns = append(suas.fns, fns...)
	return suas
}

// Scan applies the selector query and scans the result into the given value.
func (suas *SysUserAccountSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, suas.ctx, ent.OpQuerySelect)
	if err := suas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysUserAccountQuery, *SysUserAccountSelect](ctx, suas.SysUserAccountQuery, suas, suas.inters, v)
}

func (suas *SysUserAccountSelect) sqlScan(ctx context.Context, root *SysUserAccountQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(suas.fns))
	for _, fn := range suas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*suas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := suas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
