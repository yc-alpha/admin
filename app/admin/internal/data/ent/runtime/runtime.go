// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/schema"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/user"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/useraccount"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/userdepartment"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescAttributes is the schema descriptor for attributes field.
	departmentDescAttributes := departmentFields[5].Descriptor()
	// department.DefaultAttributes holds the default value on creation for the attributes field.
	department.DefaultAttributes = departmentDescAttributes.Default.(map[string]interface{})
	// departmentDescCreatedAt is the schema descriptor for created_at field.
	departmentDescCreatedAt := departmentFields[8].Descriptor()
	// department.DefaultCreatedAt holds the default value on creation for the created_at field.
	department.DefaultCreatedAt = departmentDescCreatedAt.Default.(func() time.Time)
	// departmentDescUpdatedAt is the schema descriptor for updated_at field.
	departmentDescUpdatedAt := departmentFields[9].Descriptor()
	// department.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	department.DefaultUpdatedAt = departmentDescUpdatedAt.Default.(func() time.Time)
	// department.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	department.UpdateDefaultUpdatedAt = departmentDescUpdatedAt.UpdateDefault.(func() time.Time)
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[1].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = func() func(string) error {
		validators := tenantDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenantDescAttributes is the schema descriptor for attributes field.
	tenantDescAttributes := tenantFields[5].Descriptor()
	// tenant.DefaultAttributes holds the default value on creation for the attributes field.
	tenant.DefaultAttributes = tenantDescAttributes.Default.(map[string]interface{})
	// tenantDescCreatedAt is the schema descriptor for created_at field.
	tenantDescCreatedAt := tenantFields[8].Descriptor()
	// tenant.DefaultCreatedAt holds the default value on creation for the created_at field.
	tenant.DefaultCreatedAt = tenantDescCreatedAt.Default.(func() time.Time)
	// tenantDescUpdatedAt is the schema descriptor for updated_at field.
	tenantDescUpdatedAt := tenantFields[9].Descriptor()
	// tenant.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tenant.DefaultUpdatedAt = tenantDescUpdatedAt.Default.(func() time.Time)
	// tenant.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tenant.UpdateDefaultUpdatedAt = tenantDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tenantDescID is the schema descriptor for id field.
	tenantDescID := tenantFields[0].Descriptor()
	// tenant.DefaultID holds the default value on creation for the id field.
	tenant.DefaultID = tenantDescID.Default.(func() int64)
	userHooks := schema.User{}.Hooks()
	user.Hooks[0] = userHooks[0]
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[3].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = func() func(string) error {
		validators := userDescPhone.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(phone string) error {
			for _, fn := range fns {
				if err := fn(phone); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescLanguage is the schema descriptor for language field.
	userDescLanguage := userFields[9].Descriptor()
	// user.DefaultLanguage holds the default value on creation for the language field.
	user.DefaultLanguage = userDescLanguage.Default.(string)
	// user.LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	user.LanguageValidator = userDescLanguage.Validators[0].(func(string) error)
	// userDescTimezone is the schema descriptor for timezone field.
	userDescTimezone := userFields[10].Descriptor()
	// user.DefaultTimezone holds the default value on creation for the timezone field.
	user.DefaultTimezone = userDescTimezone.Default.(string)
	// user.TimezoneValidator is a validator for the "timezone" field. It is called by the builders before save.
	user.TimezoneValidator = userDescTimezone.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[13].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[14].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() int64)
	useraccountFields := schema.UserAccount{}.Fields()
	_ = useraccountFields
	// useraccountDescUserID is the schema descriptor for user_id field.
	useraccountDescUserID := useraccountFields[0].Descriptor()
	// useraccount.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	useraccount.UserIDValidator = useraccountDescUserID.Validators[0].(func(int64) error)
	// useraccountDescCreatedAt is the schema descriptor for created_at field.
	useraccountDescCreatedAt := useraccountFields[4].Descriptor()
	// useraccount.DefaultCreatedAt holds the default value on creation for the created_at field.
	useraccount.DefaultCreatedAt = useraccountDescCreatedAt.Default.(func() time.Time)
	// useraccountDescUpdatedAt is the schema descriptor for updated_at field.
	useraccountDescUpdatedAt := useraccountFields[5].Descriptor()
	// useraccount.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	useraccount.DefaultUpdatedAt = useraccountDescUpdatedAt.Default.(func() time.Time)
	// useraccount.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	useraccount.UpdateDefaultUpdatedAt = useraccountDescUpdatedAt.UpdateDefault.(func() time.Time)
	userdepartmentFields := schema.UserDepartment{}.Fields()
	_ = userdepartmentFields
	// userdepartmentDescAttributes is the schema descriptor for attributes field.
	userdepartmentDescAttributes := userdepartmentFields[4].Descriptor()
	// userdepartment.DefaultAttributes holds the default value on creation for the attributes field.
	userdepartment.DefaultAttributes = userdepartmentDescAttributes.Default.(map[string]interface{})
}

const (
	Version = "v0.14.4"                                         // Version of ent codegen.
	Sum     = "h1:/DhDraSLXIkBhyiVoJeSshr4ZYi7femzhj6/TckzZuI=" // Sum of ent codegen.
)
