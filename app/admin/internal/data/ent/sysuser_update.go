// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuseraccount"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserMutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUsername sets the "username" field.
func (suu *SysUserUpdate) SetUsername(s string) *SysUserUpdate {
	suu.mutation.SetUsername(s)
	return suu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUsername(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUsername(*s)
	}
	return suu
}

// SetEmail sets the "email" field.
func (suu *SysUserUpdate) SetEmail(s string) *SysUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// SetPhone sets the "phone" field.
func (suu *SysUserUpdate) SetPhone(s string) *SysUserUpdate {
	suu.mutation.SetPhone(s)
	return suu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePhone(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPhone(*s)
	}
	return suu
}

// SetPassword sets the "password" field.
func (suu *SysUserUpdate) SetPassword(s string) *SysUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePassword(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPassword(*s)
	}
	return suu
}

// SetStatus sets the "status" field.
func (suu *SysUserUpdate) SetStatus(s sysuser.Status) *SysUserUpdate {
	suu.mutation.SetStatus(s)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableStatus(s *sysuser.Status) *SysUserUpdate {
	if s != nil {
		suu.SetStatus(*s)
	}
	return suu
}

// SetFullName sets the "full_name" field.
func (suu *SysUserUpdate) SetFullName(s string) *SysUserUpdate {
	suu.mutation.SetFullName(s)
	return suu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableFullName(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetFullName(*s)
	}
	return suu
}

// ClearFullName clears the value of the "full_name" field.
func (suu *SysUserUpdate) ClearFullName() *SysUserUpdate {
	suu.mutation.ClearFullName()
	return suu
}

// SetGender sets the "gender" field.
func (suu *SysUserUpdate) SetGender(s sysuser.Gender) *SysUserUpdate {
	suu.mutation.SetGender(s)
	return suu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableGender(s *sysuser.Gender) *SysUserUpdate {
	if s != nil {
		suu.SetGender(*s)
	}
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SysUserUpdate) ClearAvatar() *SysUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetLanguage sets the "language" field.
func (suu *SysUserUpdate) SetLanguage(s string) *SysUserUpdate {
	suu.mutation.SetLanguage(s)
	return suu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableLanguage(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetLanguage(*s)
	}
	return suu
}

// SetTimezone sets the "timezone" field.
func (suu *SysUserUpdate) SetTimezone(s string) *SysUserUpdate {
	suu.mutation.SetTimezone(s)
	return suu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableTimezone(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetTimezone(*s)
	}
	return suu
}

// SetCreatedBy sets the "created_by" field.
func (suu *SysUserUpdate) SetCreatedBy(i int64) *SysUserUpdate {
	suu.mutation.ResetCreatedBy()
	suu.mutation.SetCreatedBy(i)
	return suu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableCreatedBy(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetCreatedBy(*i)
	}
	return suu
}

// AddCreatedBy adds i to the "created_by" field.
func (suu *SysUserUpdate) AddCreatedBy(i int64) *SysUserUpdate {
	suu.mutation.AddCreatedBy(i)
	return suu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suu *SysUserUpdate) ClearCreatedBy() *SysUserUpdate {
	suu.mutation.ClearCreatedBy()
	return suu
}

// SetUpdatedBy sets the "updated_by" field.
func (suu *SysUserUpdate) SetUpdatedBy(i int64) *SysUserUpdate {
	suu.mutation.ResetUpdatedBy()
	suu.mutation.SetUpdatedBy(i)
	return suu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUpdatedBy(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetUpdatedBy(*i)
	}
	return suu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suu *SysUserUpdate) AddUpdatedBy(i int64) *SysUserUpdate {
	suu.mutation.AddUpdatedBy(i)
	return suu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suu *SysUserUpdate) ClearUpdatedBy() *SysUserUpdate {
	suu.mutation.ClearUpdatedBy()
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SysUserUpdate) SetUpdatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetDeletedAt sets the "deleted_at" field.
func (suu *SysUserUpdate) SetDeletedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetDeletedAt(t)
	return suu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeletedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetDeletedAt(*t)
	}
	return suu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suu *SysUserUpdate) ClearDeletedAt() *SysUserUpdate {
	suu.mutation.ClearDeletedAt()
	return suu
}

// AddAccountIDs adds the "accounts" edge to the SysUserAccount entity by IDs.
func (suu *SysUserUpdate) AddAccountIDs(ids ...int) *SysUserUpdate {
	suu.mutation.AddAccountIDs(ids...)
	return suu
}

// AddAccounts adds the "accounts" edges to the SysUserAccount entity.
func (suu *SysUserUpdate) AddAccounts(s ...*SysUserAccount) *SysUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.AddAccountIDs(ids...)
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// ClearAccounts clears all "accounts" edges to the SysUserAccount entity.
func (suu *SysUserUpdate) ClearAccounts() *SysUserUpdate {
	suu.mutation.ClearAccounts()
	return suu
}

// RemoveAccountIDs removes the "accounts" edge to SysUserAccount entities by IDs.
func (suu *SysUserUpdate) RemoveAccountIDs(ids ...int) *SysUserUpdate {
	suu.mutation.RemoveAccountIDs(ids...)
	return suu
}

// RemoveAccounts removes "accounts" edges to SysUserAccount entities.
func (suu *SysUserUpdate) RemoveAccounts(s ...*SysUserAccount) *SysUserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.RemoveAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	if err := suu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SysUserUpdate) defaults() error {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		if sysuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suu *SysUserUpdate) check() error {
	if v, ok := suu.mutation.Username(); ok {
		if err := sysuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SysUser.username": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Email(); ok {
		if err := sysuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SysUser.email": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Phone(); ok {
		if err := sysuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SysUser.phone": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Password(); ok {
		if err := sysuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "SysUser.password": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Status(); ok {
		if err := sysuser.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysUser.status": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Gender(); ok {
		if err := sysuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "SysUser.gender": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Language(); ok {
		if err := sysuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "SysUser.language": %w`, err)}
		}
	}
	if v, ok := suu.mutation.Timezone(); ok {
		if err := sysuser.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "SysUser.timezone": %w`, err)}
		}
	}
	return nil
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := suu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suu.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suu.mutation.FullName(); ok {
		_spec.SetField(sysuser.FieldFullName, field.TypeString, value)
	}
	if suu.mutation.FullNameCleared() {
		_spec.ClearField(sysuser.FieldFullName, field.TypeString)
	}
	if value, ok := suu.mutation.Gender(); ok {
		_spec.SetField(sysuser.FieldGender, field.TypeEnum, value)
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suu.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suu.mutation.Language(); ok {
		_spec.SetField(sysuser.FieldLanguage, field.TypeString, value)
	}
	if value, ok := suu.mutation.Timezone(); ok {
		_spec.SetField(sysuser.FieldTimezone, field.TypeString, value)
	}
	if value, ok := suu.mutation.CreatedBy(); ok {
		_spec.SetField(sysuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if suu.mutation.CreatedByCleared() {
		_spec.ClearField(sysuser.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := suu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if suu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysuser.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suu.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suu.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeTime)
	}
	if suu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !suu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserMutation
}

// SetUsername sets the "username" field.
func (suuo *SysUserUpdateOne) SetUsername(s string) *SysUserUpdateOne {
	suuo.mutation.SetUsername(s)
	return suuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUsername(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUsername(*s)
	}
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SysUserUpdateOne) SetEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// SetPhone sets the "phone" field.
func (suuo *SysUserUpdateOne) SetPhone(s string) *SysUserUpdateOne {
	suuo.mutation.SetPhone(s)
	return suuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePhone(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPhone(*s)
	}
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *SysUserUpdateOne) SetPassword(s string) *SysUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePassword(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPassword(*s)
	}
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *SysUserUpdateOne) SetStatus(s sysuser.Status) *SysUserUpdateOne {
	suuo.mutation.SetStatus(s)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableStatus(s *sysuser.Status) *SysUserUpdateOne {
	if s != nil {
		suuo.SetStatus(*s)
	}
	return suuo
}

// SetFullName sets the "full_name" field.
func (suuo *SysUserUpdateOne) SetFullName(s string) *SysUserUpdateOne {
	suuo.mutation.SetFullName(s)
	return suuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableFullName(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetFullName(*s)
	}
	return suuo
}

// ClearFullName clears the value of the "full_name" field.
func (suuo *SysUserUpdateOne) ClearFullName() *SysUserUpdateOne {
	suuo.mutation.ClearFullName()
	return suuo
}

// SetGender sets the "gender" field.
func (suuo *SysUserUpdateOne) SetGender(s sysuser.Gender) *SysUserUpdateOne {
	suuo.mutation.SetGender(s)
	return suuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableGender(s *sysuser.Gender) *SysUserUpdateOne {
	if s != nil {
		suuo.SetGender(*s)
	}
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SysUserUpdateOne) ClearAvatar() *SysUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetLanguage sets the "language" field.
func (suuo *SysUserUpdateOne) SetLanguage(s string) *SysUserUpdateOne {
	suuo.mutation.SetLanguage(s)
	return suuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableLanguage(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetLanguage(*s)
	}
	return suuo
}

// SetTimezone sets the "timezone" field.
func (suuo *SysUserUpdateOne) SetTimezone(s string) *SysUserUpdateOne {
	suuo.mutation.SetTimezone(s)
	return suuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableTimezone(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetTimezone(*s)
	}
	return suuo
}

// SetCreatedBy sets the "created_by" field.
func (suuo *SysUserUpdateOne) SetCreatedBy(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetCreatedBy()
	suuo.mutation.SetCreatedBy(i)
	return suuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableCreatedBy(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetCreatedBy(*i)
	}
	return suuo
}

// AddCreatedBy adds i to the "created_by" field.
func (suuo *SysUserUpdateOne) AddCreatedBy(i int64) *SysUserUpdateOne {
	suuo.mutation.AddCreatedBy(i)
	return suuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suuo *SysUserUpdateOne) ClearCreatedBy() *SysUserUpdateOne {
	suuo.mutation.ClearCreatedBy()
	return suuo
}

// SetUpdatedBy sets the "updated_by" field.
func (suuo *SysUserUpdateOne) SetUpdatedBy(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetUpdatedBy()
	suuo.mutation.SetUpdatedBy(i)
	return suuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUpdatedBy(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetUpdatedBy(*i)
	}
	return suuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suuo *SysUserUpdateOne) AddUpdatedBy(i int64) *SysUserUpdateOne {
	suuo.mutation.AddUpdatedBy(i)
	return suuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suuo *SysUserUpdateOne) ClearUpdatedBy() *SysUserUpdateOne {
	suuo.mutation.ClearUpdatedBy()
	return suuo
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetDeletedAt sets the "deleted_at" field.
func (suuo *SysUserUpdateOne) SetDeletedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetDeletedAt(t)
	return suuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeletedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetDeletedAt(*t)
	}
	return suuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suuo *SysUserUpdateOne) ClearDeletedAt() *SysUserUpdateOne {
	suuo.mutation.ClearDeletedAt()
	return suuo
}

// AddAccountIDs adds the "accounts" edge to the SysUserAccount entity by IDs.
func (suuo *SysUserUpdateOne) AddAccountIDs(ids ...int) *SysUserUpdateOne {
	suuo.mutation.AddAccountIDs(ids...)
	return suuo
}

// AddAccounts adds the "accounts" edges to the SysUserAccount entity.
func (suuo *SysUserUpdateOne) AddAccounts(s ...*SysUserAccount) *SysUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.AddAccountIDs(ids...)
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// ClearAccounts clears all "accounts" edges to the SysUserAccount entity.
func (suuo *SysUserUpdateOne) ClearAccounts() *SysUserUpdateOne {
	suuo.mutation.ClearAccounts()
	return suuo
}

// RemoveAccountIDs removes the "accounts" edge to SysUserAccount entities by IDs.
func (suuo *SysUserUpdateOne) RemoveAccountIDs(ids ...int) *SysUserUpdateOne {
	suuo.mutation.RemoveAccountIDs(ids...)
	return suuo
}

// RemoveAccounts removes "accounts" edges to SysUserAccount entities.
func (suuo *SysUserUpdateOne) RemoveAccounts(s ...*SysUserAccount) *SysUserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.RemoveAccountIDs(ids...)
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suuo *SysUserUpdateOne) Where(ps ...predicate.SysUser) *SysUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	if err := suuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SysUserUpdateOne) defaults() error {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		if sysuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suuo *SysUserUpdateOne) check() error {
	if v, ok := suuo.mutation.Username(); ok {
		if err := sysuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SysUser.username": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Email(); ok {
		if err := sysuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SysUser.email": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Phone(); ok {
		if err := sysuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SysUser.phone": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Password(); ok {
		if err := sysuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "SysUser.password": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Status(); ok {
		if err := sysuser.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysUser.status": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Gender(); ok {
		if err := sysuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "SysUser.gender": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Language(); ok {
		if err := sysuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "SysUser.language": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.Timezone(); ok {
		if err := sysuser.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "SysUser.timezone": %w`, err)}
		}
	}
	return nil
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	if err := suuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suuo.mutation.FullName(); ok {
		_spec.SetField(sysuser.FieldFullName, field.TypeString, value)
	}
	if suuo.mutation.FullNameCleared() {
		_spec.ClearField(sysuser.FieldFullName, field.TypeString)
	}
	if value, ok := suuo.mutation.Gender(); ok {
		_spec.SetField(sysuser.FieldGender, field.TypeEnum, value)
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suuo.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suuo.mutation.Language(); ok {
		_spec.SetField(sysuser.FieldLanguage, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Timezone(); ok {
		_spec.SetField(sysuser.FieldTimezone, field.TypeString, value)
	}
	if value, ok := suuo.mutation.CreatedBy(); ok {
		_spec.SetField(sysuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysuser.FieldCreatedBy, field.TypeInt64, value)
	}
	if suuo.mutation.CreatedByCleared() {
		_spec.ClearField(sysuser.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := suuo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
	}
	if suuo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysuser.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suuo.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suuo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeTime)
	}
	if suuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !suuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
