// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuseraccount"
)

// SysUserAccountDelete is the builder for deleting a SysUserAccount entity.
type SysUserAccountDelete struct {
	config
	hooks    []Hook
	mutation *SysUserAccountMutation
}

// Where appends a list predicates to the SysUserAccountDelete builder.
func (suad *SysUserAccountDelete) Where(ps ...predicate.SysUserAccount) *SysUserAccountDelete {
	suad.mutation.Where(ps...)
	return suad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (suad *SysUserAccountDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, suad.sqlExec, suad.mutation, suad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (suad *SysUserAccountDelete) ExecX(ctx context.Context) int {
	n, err := suad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (suad *SysUserAccountDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysuseraccount.Table, sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt))
	if ps := suad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, suad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	suad.mutation.done = true
	return affected, err
}

// SysUserAccountDeleteOne is the builder for deleting a single SysUserAccount entity.
type SysUserAccountDeleteOne struct {
	suad *SysUserAccountDelete
}

// Where appends a list predicates to the SysUserAccountDelete builder.
func (suado *SysUserAccountDeleteOne) Where(ps ...predicate.SysUserAccount) *SysUserAccountDeleteOne {
	suado.suad.mutation.Where(ps...)
	return suado
}

// Exec executes the deletion query.
func (suado *SysUserAccountDeleteOne) Exec(ctx context.Context) error {
	n, err := suado.suad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysuseraccount.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (suado *SysUserAccountDeleteOne) ExecX(ctx context.Context) {
	if err := suado.Exec(ctx); err != nil {
		panic(err)
	}
}
