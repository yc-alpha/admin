// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/usertenant"
)

// UserTenantCreate is the builder for creating a UserTenant entity.
type UserTenantCreate struct {
	config
	mutation *UserTenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (utc *UserTenantCreate) SetUserID(i int64) *UserTenantCreate {
	utc.mutation.SetUserID(i)
	return utc
}

// SetTenantID sets the "tenant_id" field.
func (utc *UserTenantCreate) SetTenantID(i int64) *UserTenantCreate {
	utc.mutation.SetTenantID(i)
	return utc
}

// SetRoleLabels sets the "role_labels" field.
func (utc *UserTenantCreate) SetRoleLabels(s []string) *UserTenantCreate {
	utc.mutation.SetRoleLabels(s)
	return utc
}

// SetID sets the "id" field.
func (utc *UserTenantCreate) SetID(i int64) *UserTenantCreate {
	utc.mutation.SetID(i)
	return utc
}

// SetUser sets the "user" edge to the SysUser entity.
func (utc *UserTenantCreate) SetUser(s *SysUser) *UserTenantCreate {
	return utc.SetUserID(s.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (utc *UserTenantCreate) SetTenant(t *Tenant) *UserTenantCreate {
	return utc.SetTenantID(t.ID)
}

// Mutation returns the UserTenantMutation object of the builder.
func (utc *UserTenantCreate) Mutation() *UserTenantMutation {
	return utc.mutation
}

// Save creates the UserTenant in the database.
func (utc *UserTenantCreate) Save(ctx context.Context) (*UserTenant, error) {
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTenantCreate) SaveX(ctx context.Context) *UserTenant {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UserTenantCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UserTenantCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UserTenantCreate) check() error {
	if _, ok := utc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserTenant.user_id"`)}
	}
	if _, ok := utc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "UserTenant.tenant_id"`)}
	}
	if len(utc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserTenant.user"`)}
	}
	if len(utc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "UserTenant.tenant"`)}
	}
	return nil
}

func (utc *UserTenantCreate) sqlSave(ctx context.Context) (*UserTenant, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	utc.mutation.id = &_node.ID
	utc.mutation.done = true
	return _node, nil
}

func (utc *UserTenantCreate) createSpec() (*UserTenant, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTenant{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(usertenant.Table, sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = utc.conflict
	if id, ok := utc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utc.mutation.RoleLabels(); ok {
		_spec.SetField(usertenant.FieldRoleLabels, field.TypeJSON, value)
		_node.RoleLabels = value
	}
	if nodes := utc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertenant.UserTable,
			Columns: []string{usertenant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertenant.TenantTable,
			Columns: []string{usertenant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserTenant.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserTenantUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (utc *UserTenantCreate) OnConflict(opts ...sql.ConflictOption) *UserTenantUpsertOne {
	utc.conflict = opts
	return &UserTenantUpsertOne{
		create: utc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (utc *UserTenantCreate) OnConflictColumns(columns ...string) *UserTenantUpsertOne {
	utc.conflict = append(utc.conflict, sql.ConflictColumns(columns...))
	return &UserTenantUpsertOne{
		create: utc,
	}
}

type (
	// UserTenantUpsertOne is the builder for "upsert"-ing
	//  one UserTenant node.
	UserTenantUpsertOne struct {
		create *UserTenantCreate
	}

	// UserTenantUpsert is the "OnConflict" setter.
	UserTenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserTenantUpsert) SetUserID(v int64) *UserTenantUpsert {
	u.Set(usertenant.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserTenantUpsert) UpdateUserID() *UserTenantUpsert {
	u.SetExcluded(usertenant.FieldUserID)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserTenantUpsert) SetTenantID(v int64) *UserTenantUpsert {
	u.Set(usertenant.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserTenantUpsert) UpdateTenantID() *UserTenantUpsert {
	u.SetExcluded(usertenant.FieldTenantID)
	return u
}

// SetRoleLabels sets the "role_labels" field.
func (u *UserTenantUpsert) SetRoleLabels(v []string) *UserTenantUpsert {
	u.Set(usertenant.FieldRoleLabels, v)
	return u
}

// UpdateRoleLabels sets the "role_labels" field to the value that was provided on create.
func (u *UserTenantUpsert) UpdateRoleLabels() *UserTenantUpsert {
	u.SetExcluded(usertenant.FieldRoleLabels)
	return u
}

// ClearRoleLabels clears the value of the "role_labels" field.
func (u *UserTenantUpsert) ClearRoleLabels() *UserTenantUpsert {
	u.SetNull(usertenant.FieldRoleLabels)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usertenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserTenantUpsertOne) UpdateNewValues() *UserTenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usertenant.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserTenantUpsertOne) Ignore() *UserTenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserTenantUpsertOne) DoNothing() *UserTenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserTenantCreate.OnConflict
// documentation for more info.
func (u *UserTenantUpsertOne) Update(set func(*UserTenantUpsert)) *UserTenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserTenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserTenantUpsertOne) SetUserID(v int64) *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserTenantUpsertOne) UpdateUserID() *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateUserID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *UserTenantUpsertOne) SetTenantID(v int64) *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserTenantUpsertOne) UpdateTenantID() *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateTenantID()
	})
}

// SetRoleLabels sets the "role_labels" field.
func (u *UserTenantUpsertOne) SetRoleLabels(v []string) *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetRoleLabels(v)
	})
}

// UpdateRoleLabels sets the "role_labels" field to the value that was provided on create.
func (u *UserTenantUpsertOne) UpdateRoleLabels() *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateRoleLabels()
	})
}

// ClearRoleLabels clears the value of the "role_labels" field.
func (u *UserTenantUpsertOne) ClearRoleLabels() *UserTenantUpsertOne {
	return u.Update(func(s *UserTenantUpsert) {
		s.ClearRoleLabels()
	})
}

// Exec executes the query.
func (u *UserTenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserTenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserTenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserTenantUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserTenantUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserTenantCreateBulk is the builder for creating many UserTenant entities in bulk.
type UserTenantCreateBulk struct {
	config
	err      error
	builders []*UserTenantCreate
	conflict []sql.ConflictOption
}

// Save creates the UserTenant entities in the database.
func (utcb *UserTenantCreateBulk) Save(ctx context.Context) ([]*UserTenant, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UserTenant, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = utcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UserTenantCreateBulk) SaveX(ctx context.Context) []*UserTenant {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UserTenantCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UserTenantCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserTenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserTenantUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (utcb *UserTenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserTenantUpsertBulk {
	utcb.conflict = opts
	return &UserTenantUpsertBulk{
		create: utcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (utcb *UserTenantCreateBulk) OnConflictColumns(columns ...string) *UserTenantUpsertBulk {
	utcb.conflict = append(utcb.conflict, sql.ConflictColumns(columns...))
	return &UserTenantUpsertBulk{
		create: utcb,
	}
}

// UserTenantUpsertBulk is the builder for "upsert"-ing
// a bulk of UserTenant nodes.
type UserTenantUpsertBulk struct {
	create *UserTenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usertenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserTenantUpsertBulk) UpdateNewValues() *UserTenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usertenant.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserTenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserTenantUpsertBulk) Ignore() *UserTenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserTenantUpsertBulk) DoNothing() *UserTenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserTenantCreateBulk.OnConflict
// documentation for more info.
func (u *UserTenantUpsertBulk) Update(set func(*UserTenantUpsert)) *UserTenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserTenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserTenantUpsertBulk) SetUserID(v int64) *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserTenantUpsertBulk) UpdateUserID() *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateUserID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *UserTenantUpsertBulk) SetTenantID(v int64) *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserTenantUpsertBulk) UpdateTenantID() *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateTenantID()
	})
}

// SetRoleLabels sets the "role_labels" field.
func (u *UserTenantUpsertBulk) SetRoleLabels(v []string) *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.SetRoleLabels(v)
	})
}

// UpdateRoleLabels sets the "role_labels" field to the value that was provided on create.
func (u *UserTenantUpsertBulk) UpdateRoleLabels() *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.UpdateRoleLabels()
	})
}

// ClearRoleLabels clears the value of the "role_labels" field.
func (u *UserTenantUpsertBulk) ClearRoleLabels() *UserTenantUpsertBulk {
	return u.Update(func(s *UserTenantUpsert) {
		s.ClearRoleLabels()
	})
}

// Exec executes the query.
func (u *UserTenantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserTenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserTenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserTenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
