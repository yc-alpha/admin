// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/user"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/useraccount"
)

// UserAccountUpdate is the builder for updating UserAccount entities.
type UserAccountUpdate struct {
	config
	hooks    []Hook
	mutation *UserAccountMutation
}

// Where appends a list predicates to the UserAccountUpdate builder.
func (uau *UserAccountUpdate) Where(ps ...predicate.UserAccount) *UserAccountUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAccountUpdate) SetUserID(i int64) *UserAccountUpdate {
	uau.mutation.SetUserID(i)
	return uau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableUserID(i *int64) *UserAccountUpdate {
	if i != nil {
		uau.SetUserID(*i)
	}
	return uau
}

// SetPlatform sets the "platform" field.
func (uau *UserAccountUpdate) SetPlatform(s string) *UserAccountUpdate {
	uau.mutation.SetPlatform(s)
	return uau
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillablePlatform(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetPlatform(*s)
	}
	return uau
}

// SetIdentifier sets the "identifier" field.
func (uau *UserAccountUpdate) SetIdentifier(s string) *UserAccountUpdate {
	uau.mutation.SetIdentifier(s)
	return uau
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableIdentifier(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetIdentifier(*s)
	}
	return uau
}

// SetName sets the "name" field.
func (uau *UserAccountUpdate) SetName(s string) *UserAccountUpdate {
	uau.mutation.SetName(s)
	return uau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableName(s *string) *UserAccountUpdate {
	if s != nil {
		uau.SetName(*s)
	}
	return uau
}

// SetCreatedAt sets the "created_at" field.
func (uau *UserAccountUpdate) SetCreatedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetCreatedAt(t)
	return uau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableCreatedAt(t *time.Time) *UserAccountUpdate {
	if t != nil {
		uau.SetCreatedAt(*t)
	}
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserAccountUpdate) SetUpdatedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetDeletedAt sets the "deleted_at" field.
func (uau *UserAccountUpdate) SetDeletedAt(t time.Time) *UserAccountUpdate {
	uau.mutation.SetDeletedAt(t)
	return uau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uau *UserAccountUpdate) SetNillableDeletedAt(t *time.Time) *UserAccountUpdate {
	if t != nil {
		uau.SetDeletedAt(*t)
	}
	return uau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uau *UserAccountUpdate) ClearDeletedAt() *UserAccountUpdate {
	uau.mutation.ClearDeletedAt()
	return uau
}

// SetUser sets the "user" edge to the User entity.
func (uau *UserAccountUpdate) SetUser(u *User) *UserAccountUpdate {
	return uau.SetUserID(u.ID)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uau *UserAccountUpdate) Mutation() *UserAccountMutation {
	return uau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uau *UserAccountUpdate) ClearUser() *UserAccountUpdate {
	uau.mutation.ClearUser()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAccountUpdate) Save(ctx context.Context) (int, error) {
	uau.defaults()
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAccountUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAccountUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserAccountUpdate) defaults() {
	if _, ok := uau.mutation.UpdatedAt(); !ok {
		v := useraccount.UpdateDefaultUpdatedAt()
		uau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAccountUpdate) check() error {
	if v, ok := uau.mutation.UserID(); ok {
		if err := useraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserAccount.user_id": %w`, err)}
		}
	}
	if uau.mutation.UserCleared() && len(uau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAccount.user"`)
	}
	return nil
}

func (uau *UserAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraccount.Table, useraccount.Columns, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.Platform(); ok {
		_spec.SetField(useraccount.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uau.mutation.Identifier(); ok {
		_spec.SetField(useraccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := uau.mutation.Name(); ok {
		_spec.SetField(useraccount.FieldName, field.TypeString, value)
	}
	if value, ok := uau.mutation.CreatedAt(); ok {
		_spec.SetField(useraccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uau.mutation.DeletedAt(); ok {
		_spec.SetField(useraccount.FieldDeletedAt, field.TypeTime, value)
	}
	if uau.mutation.DeletedAtCleared() {
		_spec.ClearField(useraccount.FieldDeletedAt, field.TypeTime)
	}
	if uau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAccountUpdateOne is the builder for updating a single UserAccount entity.
type UserAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAccountMutation
}

// SetUserID sets the "user_id" field.
func (uauo *UserAccountUpdateOne) SetUserID(i int64) *UserAccountUpdateOne {
	uauo.mutation.SetUserID(i)
	return uauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableUserID(i *int64) *UserAccountUpdateOne {
	if i != nil {
		uauo.SetUserID(*i)
	}
	return uauo
}

// SetPlatform sets the "platform" field.
func (uauo *UserAccountUpdateOne) SetPlatform(s string) *UserAccountUpdateOne {
	uauo.mutation.SetPlatform(s)
	return uauo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillablePlatform(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetPlatform(*s)
	}
	return uauo
}

// SetIdentifier sets the "identifier" field.
func (uauo *UserAccountUpdateOne) SetIdentifier(s string) *UserAccountUpdateOne {
	uauo.mutation.SetIdentifier(s)
	return uauo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableIdentifier(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetIdentifier(*s)
	}
	return uauo
}

// SetName sets the "name" field.
func (uauo *UserAccountUpdateOne) SetName(s string) *UserAccountUpdateOne {
	uauo.mutation.SetName(s)
	return uauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableName(s *string) *UserAccountUpdateOne {
	if s != nil {
		uauo.SetName(*s)
	}
	return uauo
}

// SetCreatedAt sets the "created_at" field.
func (uauo *UserAccountUpdateOne) SetCreatedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetCreatedAt(t)
	return uauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *UserAccountUpdateOne {
	if t != nil {
		uauo.SetCreatedAt(*t)
	}
	return uauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserAccountUpdateOne) SetUpdatedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetDeletedAt sets the "deleted_at" field.
func (uauo *UserAccountUpdateOne) SetDeletedAt(t time.Time) *UserAccountUpdateOne {
	uauo.mutation.SetDeletedAt(t)
	return uauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uauo *UserAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *UserAccountUpdateOne {
	if t != nil {
		uauo.SetDeletedAt(*t)
	}
	return uauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uauo *UserAccountUpdateOne) ClearDeletedAt() *UserAccountUpdateOne {
	uauo.mutation.ClearDeletedAt()
	return uauo
}

// SetUser sets the "user" edge to the User entity.
func (uauo *UserAccountUpdateOne) SetUser(u *User) *UserAccountUpdateOne {
	return uauo.SetUserID(u.ID)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uauo *UserAccountUpdateOne) Mutation() *UserAccountMutation {
	return uauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uauo *UserAccountUpdateOne) ClearUser() *UserAccountUpdateOne {
	uauo.mutation.ClearUser()
	return uauo
}

// Where appends a list predicates to the UserAccountUpdate builder.
func (uauo *UserAccountUpdateOne) Where(ps ...predicate.UserAccount) *UserAccountUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAccountUpdateOne) Select(field string, fields ...string) *UserAccountUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAccount entity.
func (uauo *UserAccountUpdateOne) Save(ctx context.Context) (*UserAccount, error) {
	uauo.defaults()
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) SaveX(ctx context.Context) *UserAccount {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAccountUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserAccountUpdateOne) defaults() {
	if _, ok := uauo.mutation.UpdatedAt(); !ok {
		v := useraccount.UpdateDefaultUpdatedAt()
		uauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAccountUpdateOne) check() error {
	if v, ok := uauo.mutation.UserID(); ok {
		if err := useraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserAccount.user_id": %w`, err)}
		}
	}
	if uauo.mutation.UserCleared() && len(uauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserAccount.user"`)
	}
	return nil
}

func (uauo *UserAccountUpdateOne) sqlSave(ctx context.Context) (_node *UserAccount, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraccount.Table, useraccount.Columns, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraccount.FieldID)
		for _, f := range fields {
			if !useraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.Platform(); ok {
		_spec.SetField(useraccount.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Identifier(); ok {
		_spec.SetField(useraccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Name(); ok {
		_spec.SetField(useraccount.FieldName, field.TypeString, value)
	}
	if value, ok := uauo.mutation.CreatedAt(); ok {
		_spec.SetField(useraccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.DeletedAt(); ok {
		_spec.SetField(useraccount.FieldDeletedAt, field.TypeTime, value)
	}
	if uauo.mutation.DeletedAtCleared() {
		_spec.ClearField(useraccount.FieldDeletedAt, field.TypeTime)
	}
	if uauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAccount{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
