// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/user"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/useraccount"
)

// UserAccountCreate is the builder for creating a UserAccount entity.
type UserAccountCreate struct {
	config
	mutation *UserAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (uac *UserAccountCreate) SetUserID(i int64) *UserAccountCreate {
	uac.mutation.SetUserID(i)
	return uac
}

// SetPlatform sets the "platform" field.
func (uac *UserAccountCreate) SetPlatform(s string) *UserAccountCreate {
	uac.mutation.SetPlatform(s)
	return uac
}

// SetIdentifier sets the "identifier" field.
func (uac *UserAccountCreate) SetIdentifier(s string) *UserAccountCreate {
	uac.mutation.SetIdentifier(s)
	return uac
}

// SetName sets the "name" field.
func (uac *UserAccountCreate) SetName(s string) *UserAccountCreate {
	uac.mutation.SetName(s)
	return uac
}

// SetCreatedAt sets the "created_at" field.
func (uac *UserAccountCreate) SetCreatedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableCreatedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetUpdatedAt sets the "updated_at" field.
func (uac *UserAccountCreate) SetUpdatedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetUpdatedAt(t)
	return uac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableUpdatedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetUpdatedAt(*t)
	}
	return uac
}

// SetDeletedAt sets the "deleted_at" field.
func (uac *UserAccountCreate) SetDeletedAt(t time.Time) *UserAccountCreate {
	uac.mutation.SetDeletedAt(t)
	return uac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableDeletedAt(t *time.Time) *UserAccountCreate {
	if t != nil {
		uac.SetDeletedAt(*t)
	}
	return uac
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserAccountCreate) SetUser(u *User) *UserAccountCreate {
	return uac.SetUserID(u.ID)
}

// Mutation returns the UserAccountMutation object of the builder.
func (uac *UserAccountCreate) Mutation() *UserAccountMutation {
	return uac.mutation
}

// Save creates the UserAccount in the database.
func (uac *UserAccountCreate) Save(ctx context.Context) (*UserAccount, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAccountCreate) SaveX(ctx context.Context) *UserAccount {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAccountCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAccountCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAccountCreate) defaults() {
	if _, ok := uac.mutation.CreatedAt(); !ok {
		v := useraccount.DefaultCreatedAt()
		uac.mutation.SetCreatedAt(v)
	}
	if _, ok := uac.mutation.UpdatedAt(); !ok {
		v := useraccount.DefaultUpdatedAt()
		uac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAccountCreate) check() error {
	if _, ok := uac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserAccount.user_id"`)}
	}
	if v, ok := uac.mutation.UserID(); ok {
		if err := useraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserAccount.user_id": %w`, err)}
		}
	}
	if _, ok := uac.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "UserAccount.platform"`)}
	}
	if _, ok := uac.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "UserAccount.identifier"`)}
	}
	if _, ok := uac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserAccount.name"`)}
	}
	if _, ok := uac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAccount.created_at"`)}
	}
	if _, ok := uac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserAccount.updated_at"`)}
	}
	if len(uac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserAccount.user"`)}
	}
	return nil
}

func (uac *UserAccountCreate) sqlSave(ctx context.Context) (*UserAccount, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAccountCreate) createSpec() (*UserAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAccount{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useraccount.Table, sqlgraph.NewFieldSpec(useraccount.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uac.conflict
	if value, ok := uac.mutation.Platform(); ok {
		_spec.SetField(useraccount.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := uac.mutation.Identifier(); ok {
		_spec.SetField(useraccount.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := uac.mutation.Name(); ok {
		_spec.SetField(useraccount.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.SetField(useraccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uac.mutation.UpdatedAt(); ok {
		_spec.SetField(useraccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uac.mutation.DeletedAt(); ok {
		_spec.SetField(useraccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAccount.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (uac *UserAccountCreate) OnConflict(opts ...sql.ConflictOption) *UserAccountUpsertOne {
	uac.conflict = opts
	return &UserAccountUpsertOne{
		create: uac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uac *UserAccountCreate) OnConflictColumns(columns ...string) *UserAccountUpsertOne {
	uac.conflict = append(uac.conflict, sql.ConflictColumns(columns...))
	return &UserAccountUpsertOne{
		create: uac,
	}
}

type (
	// UserAccountUpsertOne is the builder for "upsert"-ing
	//  one UserAccount node.
	UserAccountUpsertOne struct {
		create *UserAccountCreate
	}

	// UserAccountUpsert is the "OnConflict" setter.
	UserAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserAccountUpsert) SetUserID(v int64) *UserAccountUpsert {
	u.Set(useraccount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateUserID() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldUserID)
	return u
}

// SetPlatform sets the "platform" field.
func (u *UserAccountUpsert) SetPlatform(v string) *UserAccountUpsert {
	u.Set(useraccount.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdatePlatform() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldPlatform)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *UserAccountUpsert) SetIdentifier(v string) *UserAccountUpsert {
	u.Set(useraccount.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateIdentifier() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldIdentifier)
	return u
}

// SetName sets the "name" field.
func (u *UserAccountUpsert) SetName(v string) *UserAccountUpsert {
	u.Set(useraccount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateName() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldName)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserAccountUpsert) SetCreatedAt(v time.Time) *UserAccountUpsert {
	u.Set(useraccount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateCreatedAt() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAccountUpsert) SetUpdatedAt(v time.Time) *UserAccountUpsert {
	u.Set(useraccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateUpdatedAt() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserAccountUpsert) SetDeletedAt(v time.Time) *UserAccountUpsert {
	u.Set(useraccount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserAccountUpsert) UpdateDeletedAt() *UserAccountUpsert {
	u.SetExcluded(useraccount.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserAccountUpsert) ClearDeletedAt() *UserAccountUpsert {
	u.SetNull(useraccount.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserAccountUpsertOne) UpdateNewValues() *UserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserAccountUpsertOne) Ignore() *UserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAccountUpsertOne) DoNothing() *UserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAccountCreate.OnConflict
// documentation for more info.
func (u *UserAccountUpsertOne) Update(set func(*UserAccountUpsert)) *UserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserAccountUpsertOne) SetUserID(v int64) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateUserID() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserAccountUpsertOne) SetPlatform(v string) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdatePlatform() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdatePlatform()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *UserAccountUpsertOne) SetIdentifier(v string) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateIdentifier() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateIdentifier()
	})
}

// SetName sets the "name" field.
func (u *UserAccountUpsertOne) SetName(v string) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateName() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserAccountUpsertOne) SetCreatedAt(v time.Time) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateCreatedAt() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAccountUpsertOne) SetUpdatedAt(v time.Time) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateUpdatedAt() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserAccountUpsertOne) SetDeletedAt(v time.Time) *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserAccountUpsertOne) UpdateDeletedAt() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserAccountUpsertOne) ClearDeletedAt() *UserAccountUpsertOne {
	return u.Update(func(s *UserAccountUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *UserAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserAccountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserAccountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserAccountCreateBulk is the builder for creating many UserAccount entities in bulk.
type UserAccountCreateBulk struct {
	config
	err      error
	builders []*UserAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the UserAccount entities in the database.
func (uacb *UserAccountCreateBulk) Save(ctx context.Context) ([]*UserAccount, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAccount, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAccountCreateBulk) SaveX(ctx context.Context) []*UserAccount {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAccountCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (uacb *UserAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserAccountUpsertBulk {
	uacb.conflict = opts
	return &UserAccountUpsertBulk{
		create: uacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uacb *UserAccountCreateBulk) OnConflictColumns(columns ...string) *UserAccountUpsertBulk {
	uacb.conflict = append(uacb.conflict, sql.ConflictColumns(columns...))
	return &UserAccountUpsertBulk{
		create: uacb,
	}
}

// UserAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of UserAccount nodes.
type UserAccountUpsertBulk struct {
	create *UserAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserAccountUpsertBulk) UpdateNewValues() *UserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserAccountUpsertBulk) Ignore() *UserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAccountUpsertBulk) DoNothing() *UserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAccountCreateBulk.OnConflict
// documentation for more info.
func (u *UserAccountUpsertBulk) Update(set func(*UserAccountUpsert)) *UserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserAccountUpsertBulk) SetUserID(v int64) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateUserID() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *UserAccountUpsertBulk) SetPlatform(v string) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdatePlatform() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdatePlatform()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *UserAccountUpsertBulk) SetIdentifier(v string) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateIdentifier() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateIdentifier()
	})
}

// SetName sets the "name" field.
func (u *UserAccountUpsertBulk) SetName(v string) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateName() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserAccountUpsertBulk) SetCreatedAt(v time.Time) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateCreatedAt() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAccountUpsertBulk) SetUpdatedAt(v time.Time) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateUpdatedAt() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserAccountUpsertBulk) SetDeletedAt(v time.Time) *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserAccountUpsertBulk) UpdateDeletedAt() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserAccountUpsertBulk) ClearDeletedAt() *UserAccountUpsertBulk {
	return u.Update(func(s *UserAccountUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *UserAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
