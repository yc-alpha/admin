// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/userdepartment"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetTenantID sets the "tenant_id" field.
func (du *DepartmentUpdate) SetTenantID(i int64) *DepartmentUpdate {
	du.mutation.SetTenantID(i)
	return du
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableTenantID(i *int64) *DepartmentUpdate {
	if i != nil {
		du.SetTenantID(*i)
	}
	return du
}

// SetParentID sets the "parent_id" field.
func (du *DepartmentUpdate) SetParentID(i int64) *DepartmentUpdate {
	du.mutation.ResetParentID()
	du.mutation.SetParentID(i)
	return du
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableParentID(i *int64) *DepartmentUpdate {
	if i != nil {
		du.SetParentID(*i)
	}
	return du
}

// AddParentID adds i to the "parent_id" field.
func (du *DepartmentUpdate) AddParentID(i int64) *DepartmentUpdate {
	du.mutation.AddParentID(i)
	return du
}

// SetName sets the "name" field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableName(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetPath sets the "path" field.
func (du *DepartmentUpdate) SetPath(s string) *DepartmentUpdate {
	du.mutation.SetPath(s)
	return du
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillablePath(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetPath(*s)
	}
	return du
}

// SetAttributes sets the "attributes" field.
func (du *DepartmentUpdate) SetAttributes(m map[string]interface{}) *DepartmentUpdate {
	du.mutation.SetAttributes(m)
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DepartmentUpdate) SetCreatedBy(i int64) *DepartmentUpdate {
	du.mutation.ResetCreatedBy()
	du.mutation.SetCreatedBy(i)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableCreatedBy(i *int64) *DepartmentUpdate {
	if i != nil {
		du.SetCreatedBy(*i)
	}
	return du
}

// AddCreatedBy adds i to the "created_by" field.
func (du *DepartmentUpdate) AddCreatedBy(i int64) *DepartmentUpdate {
	du.mutation.AddCreatedBy(i)
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DepartmentUpdate) ClearCreatedBy() *DepartmentUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DepartmentUpdate) SetUpdatedBy(i int64) *DepartmentUpdate {
	du.mutation.ResetUpdatedBy()
	du.mutation.SetUpdatedBy(i)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableUpdatedBy(i *int64) *DepartmentUpdate {
	if i != nil {
		du.SetUpdatedBy(*i)
	}
	return du
}

// AddUpdatedBy adds i to the "updated_by" field.
func (du *DepartmentUpdate) AddUpdatedBy(i int64) *DepartmentUpdate {
	du.mutation.AddUpdatedBy(i)
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DepartmentUpdate) ClearUpdatedBy() *DepartmentUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DepartmentUpdate) SetUpdatedAt(t time.Time) *DepartmentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DepartmentUpdate) SetDeletedAt(t time.Time) *DepartmentUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableDeletedAt(t *time.Time) *DepartmentUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DepartmentUpdate) ClearDeletedAt() *DepartmentUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (du *DepartmentUpdate) SetTenant(t *Tenant) *DepartmentUpdate {
	return du.SetTenantID(t.ID)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (du *DepartmentUpdate) AddUserDepartmentIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.AddUserDepartmentIDs(ids...)
	return du
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (du *DepartmentUpdate) AddUserDepartments(u ...*UserDepartment) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddUserDepartmentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (du *DepartmentUpdate) ClearTenant() *DepartmentUpdate {
	du.mutation.ClearTenant()
	return du
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (du *DepartmentUpdate) ClearUserDepartments() *DepartmentUpdate {
	du.mutation.ClearUserDepartments()
	return du
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (du *DepartmentUpdate) RemoveUserDepartmentIDs(ids ...int64) *DepartmentUpdate {
	du.mutation.RemoveUserDepartmentIDs(ids...)
	return du
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (du *DepartmentUpdate) RemoveUserDepartments(u ...*UserDepartment) *DepartmentUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveUserDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DepartmentUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := department.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DepartmentUpdate) check() error {
	if du.mutation.TenantCleared() && len(du.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Department.tenant"`)
	}
	return nil
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.ParentID(); ok {
		_spec.SetField(department.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedParentID(); ok {
		_spec.AddField(department.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Path(); ok {
		_spec.SetField(department.FieldPath, field.TypeString, value)
	}
	if value, ok := du.mutation.Attributes(); ok {
		_spec.SetField(department.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := du.mutation.CreatedBy(); ok {
		_spec.SetField(department.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedCreatedBy(); ok {
		_spec.AddField(department.FieldCreatedBy, field.TypeInt64, value)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(department.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(department.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(department.FieldUpdatedBy, field.TypeInt64, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(department.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(department.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(department.FieldDeletedAt, field.TypeTime)
	}
	if du.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.TenantTable,
			Columns: []string{department.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.TenantTable,
			Columns: []string{department.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !du.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetTenantID sets the "tenant_id" field.
func (duo *DepartmentUpdateOne) SetTenantID(i int64) *DepartmentUpdateOne {
	duo.mutation.SetTenantID(i)
	return duo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableTenantID(i *int64) *DepartmentUpdateOne {
	if i != nil {
		duo.SetTenantID(*i)
	}
	return duo
}

// SetParentID sets the "parent_id" field.
func (duo *DepartmentUpdateOne) SetParentID(i int64) *DepartmentUpdateOne {
	duo.mutation.ResetParentID()
	duo.mutation.SetParentID(i)
	return duo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableParentID(i *int64) *DepartmentUpdateOne {
	if i != nil {
		duo.SetParentID(*i)
	}
	return duo
}

// AddParentID adds i to the "parent_id" field.
func (duo *DepartmentUpdateOne) AddParentID(i int64) *DepartmentUpdateOne {
	duo.mutation.AddParentID(i)
	return duo
}

// SetName sets the "name" field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableName(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetPath sets the "path" field.
func (duo *DepartmentUpdateOne) SetPath(s string) *DepartmentUpdateOne {
	duo.mutation.SetPath(s)
	return duo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillablePath(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetPath(*s)
	}
	return duo
}

// SetAttributes sets the "attributes" field.
func (duo *DepartmentUpdateOne) SetAttributes(m map[string]interface{}) *DepartmentUpdateOne {
	duo.mutation.SetAttributes(m)
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DepartmentUpdateOne) SetCreatedBy(i int64) *DepartmentUpdateOne {
	duo.mutation.ResetCreatedBy()
	duo.mutation.SetCreatedBy(i)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableCreatedBy(i *int64) *DepartmentUpdateOne {
	if i != nil {
		duo.SetCreatedBy(*i)
	}
	return duo
}

// AddCreatedBy adds i to the "created_by" field.
func (duo *DepartmentUpdateOne) AddCreatedBy(i int64) *DepartmentUpdateOne {
	duo.mutation.AddCreatedBy(i)
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DepartmentUpdateOne) ClearCreatedBy() *DepartmentUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DepartmentUpdateOne) SetUpdatedBy(i int64) *DepartmentUpdateOne {
	duo.mutation.ResetUpdatedBy()
	duo.mutation.SetUpdatedBy(i)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableUpdatedBy(i *int64) *DepartmentUpdateOne {
	if i != nil {
		duo.SetUpdatedBy(*i)
	}
	return duo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (duo *DepartmentUpdateOne) AddUpdatedBy(i int64) *DepartmentUpdateOne {
	duo.mutation.AddUpdatedBy(i)
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DepartmentUpdateOne) ClearUpdatedBy() *DepartmentUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DepartmentUpdateOne) SetUpdatedAt(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DepartmentUpdateOne) SetDeletedAt(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableDeletedAt(t *time.Time) *DepartmentUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DepartmentUpdateOne) ClearDeletedAt() *DepartmentUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (duo *DepartmentUpdateOne) SetTenant(t *Tenant) *DepartmentUpdateOne {
	return duo.SetTenantID(t.ID)
}

// AddUserDepartmentIDs adds the "user_departments" edge to the UserDepartment entity by IDs.
func (duo *DepartmentUpdateOne) AddUserDepartmentIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.AddUserDepartmentIDs(ids...)
	return duo
}

// AddUserDepartments adds the "user_departments" edges to the UserDepartment entity.
func (duo *DepartmentUpdateOne) AddUserDepartments(u ...*UserDepartment) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddUserDepartmentIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (duo *DepartmentUpdateOne) ClearTenant() *DepartmentUpdateOne {
	duo.mutation.ClearTenant()
	return duo
}

// ClearUserDepartments clears all "user_departments" edges to the UserDepartment entity.
func (duo *DepartmentUpdateOne) ClearUserDepartments() *DepartmentUpdateOne {
	duo.mutation.ClearUserDepartments()
	return duo
}

// RemoveUserDepartmentIDs removes the "user_departments" edge to UserDepartment entities by IDs.
func (duo *DepartmentUpdateOne) RemoveUserDepartmentIDs(ids ...int64) *DepartmentUpdateOne {
	duo.mutation.RemoveUserDepartmentIDs(ids...)
	return duo
}

// RemoveUserDepartments removes "user_departments" edges to UserDepartment entities.
func (duo *DepartmentUpdateOne) RemoveUserDepartments(u ...*UserDepartment) *DepartmentUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveUserDepartmentIDs(ids...)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DepartmentUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := department.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DepartmentUpdateOne) check() error {
	if duo.mutation.TenantCleared() && len(duo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Department.tenant"`)
	}
	return nil
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.ParentID(); ok {
		_spec.SetField(department.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedParentID(); ok {
		_spec.AddField(department.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Path(); ok {
		_spec.SetField(department.FieldPath, field.TypeString, value)
	}
	if value, ok := duo.mutation.Attributes(); ok {
		_spec.SetField(department.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.CreatedBy(); ok {
		_spec.SetField(department.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(department.FieldCreatedBy, field.TypeInt64, value)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(department.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(department.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(department.FieldUpdatedBy, field.TypeInt64, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(department.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(department.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(department.FieldDeletedAt, field.TypeTime)
	}
	if duo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.TenantTable,
			Columns: []string{department.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.TenantTable,
			Columns: []string{department.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedUserDepartmentsIDs(); len(nodes) > 0 && !duo.mutation.UserDepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserDepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.UserDepartmentsTable,
			Columns: []string{department.UserDepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdepartment.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
