// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/yc-alpha/admin/app/admin/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuseraccount"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/userdepartment"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/usertenant"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
	// SysUserAccount is the client for interacting with the SysUserAccount builders.
	SysUserAccount *SysUserAccountClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// UserDepartment is the client for interacting with the UserDepartment builders.
	UserDepartment *UserDepartmentClient
	// UserTenant is the client for interacting with the UserTenant builders.
	UserTenant *UserTenantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Department = NewDepartmentClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
	c.SysUserAccount = NewSysUserAccountClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.UserDepartment = NewUserDepartmentClient(c.config)
	c.UserTenant = NewUserTenantClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Department:     NewDepartmentClient(cfg),
		SysUser:        NewSysUserClient(cfg),
		SysUserAccount: NewSysUserAccountClient(cfg),
		Tenant:         NewTenantClient(cfg),
		UserDepartment: NewUserDepartmentClient(cfg),
		UserTenant:     NewUserTenantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Department:     NewDepartmentClient(cfg),
		SysUser:        NewSysUserClient(cfg),
		SysUserAccount: NewSysUserAccountClient(cfg),
		Tenant:         NewTenantClient(cfg),
		UserDepartment: NewUserDepartmentClient(cfg),
		UserTenant:     NewUserTenantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Department.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Department, c.SysUser, c.SysUserAccount, c.Tenant, c.UserDepartment,
		c.UserTenant,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Department, c.SysUser, c.SysUserAccount, c.Tenant, c.UserDepartment,
		c.UserTenant,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *SysUserMutation:
		return c.SysUser.mutate(ctx, m)
	case *SysUserAccountMutation:
		return c.SysUserAccount.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *UserDepartmentMutation:
		return c.UserDepartment.mutate(ctx, m)
	case *UserTenantMutation:
		return c.UserTenant.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int64) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id int64) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int64) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int64) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Department.
func (c *DepartmentClient) QueryTenant(d *Department) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, department.TenantTable, department.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDepartments queries the user_departments edge of a Department.
func (c *DepartmentClient) QueryUserDepartments(d *Department) *UserDepartmentQuery {
	query := (&UserDepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(userdepartment.Table, userdepartment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.UserDepartmentsTable, department.UserDepartmentsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	return c.inters.Department
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Department mutation op: %q", m.Op())
	}
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysuser.Intercept(f(g(h())))`.
func (c *SysUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysUser = append(c.inters.SysUser, interceptors...)
}

// Create returns a builder for creating a SysUser entity.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysUserClient) MapCreateBulk(slice any, setFunc func(*SysUserCreate, int)) *SysUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysUserCreateBulk{err: fmt.Errorf("calling to SysUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id int64) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysUserClient) DeleteOneID(id int64) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysUser},
		inters: c.Interceptors(),
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id int64) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id int64) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccounts queries the accounts edge of a SysUser.
func (c *SysUserClient) QueryAccounts(su *SysUser) *SysUserAccountQuery {
	query := (&SysUserAccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysuseraccount.Table, sysuseraccount.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysuser.AccountsTable, sysuser.AccountsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTenants queries the user_tenants edge of a SysUser.
func (c *SysUserClient) QueryUserTenants(su *SysUser) *UserTenantQuery {
	query := (&UserTenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(usertenant.Table, usertenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysuser.UserTenantsTable, sysuser.UserTenantsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDepartments queries the user_departments edge of a SysUser.
func (c *SysUserClient) QueryUserDepartments(su *SysUser) *UserDepartmentQuery {
	query := (&UserDepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(userdepartment.Table, userdepartment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysuser.UserDepartmentsTable, sysuser.UserDepartmentsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	hooks := c.hooks.SysUser
	return append(hooks[:len(hooks):len(hooks)], sysuser.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SysUserClient) Interceptors() []Interceptor {
	return c.inters.SysUser
}

func (c *SysUserClient) mutate(ctx context.Context, m *SysUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysUser mutation op: %q", m.Op())
	}
}

// SysUserAccountClient is a client for the SysUserAccount schema.
type SysUserAccountClient struct {
	config
}

// NewSysUserAccountClient returns a client for the SysUserAccount from the given config.
func NewSysUserAccountClient(c config) *SysUserAccountClient {
	return &SysUserAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuseraccount.Hooks(f(g(h())))`.
func (c *SysUserAccountClient) Use(hooks ...Hook) {
	c.hooks.SysUserAccount = append(c.hooks.SysUserAccount, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysuseraccount.Intercept(f(g(h())))`.
func (c *SysUserAccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysUserAccount = append(c.inters.SysUserAccount, interceptors...)
}

// Create returns a builder for creating a SysUserAccount entity.
func (c *SysUserAccountClient) Create() *SysUserAccountCreate {
	mutation := newSysUserAccountMutation(c.config, OpCreate)
	return &SysUserAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUserAccount entities.
func (c *SysUserAccountClient) CreateBulk(builders ...*SysUserAccountCreate) *SysUserAccountCreateBulk {
	return &SysUserAccountCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysUserAccountClient) MapCreateBulk(slice any, setFunc func(*SysUserAccountCreate, int)) *SysUserAccountCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysUserAccountCreateBulk{err: fmt.Errorf("calling to SysUserAccountClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysUserAccountCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysUserAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUserAccount.
func (c *SysUserAccountClient) Update() *SysUserAccountUpdate {
	mutation := newSysUserAccountMutation(c.config, OpUpdate)
	return &SysUserAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserAccountClient) UpdateOne(sua *SysUserAccount) *SysUserAccountUpdateOne {
	mutation := newSysUserAccountMutation(c.config, OpUpdateOne, withSysUserAccount(sua))
	return &SysUserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserAccountClient) UpdateOneID(id int) *SysUserAccountUpdateOne {
	mutation := newSysUserAccountMutation(c.config, OpUpdateOne, withSysUserAccountID(id))
	return &SysUserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUserAccount.
func (c *SysUserAccountClient) Delete() *SysUserAccountDelete {
	mutation := newSysUserAccountMutation(c.config, OpDelete)
	return &SysUserAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserAccountClient) DeleteOne(sua *SysUserAccount) *SysUserAccountDeleteOne {
	return c.DeleteOneID(sua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysUserAccountClient) DeleteOneID(id int) *SysUserAccountDeleteOne {
	builder := c.Delete().Where(sysuseraccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserAccountDeleteOne{builder}
}

// Query returns a query builder for SysUserAccount.
func (c *SysUserAccountClient) Query() *SysUserAccountQuery {
	return &SysUserAccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysUserAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a SysUserAccount entity by its id.
func (c *SysUserAccountClient) Get(ctx context.Context, id int) (*SysUserAccount, error) {
	return c.Query().Where(sysuseraccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserAccountClient) GetX(ctx context.Context, id int) *SysUserAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SysUserAccount.
func (c *SysUserAccountClient) QueryUser(sua *SysUserAccount) *SysUserQuery {
	query := (&SysUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuseraccount.Table, sysuseraccount.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysuseraccount.UserTable, sysuseraccount.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysUserAccountClient) Hooks() []Hook {
	return c.hooks.SysUserAccount
}

// Interceptors returns the client interceptors.
func (c *SysUserAccountClient) Interceptors() []Interceptor {
	return c.inters.SysUserAccount
}

func (c *SysUserAccountClient) mutate(ctx context.Context, m *SysUserAccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysUserAccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysUserAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysUserAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysUserAccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysUserAccount mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int64) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int64) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int64) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int64) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserTenants queries the user_tenants edge of a Tenant.
func (c *TenantClient) QueryUserTenants(t *Tenant) *UserTenantQuery {
	query := (&UserTenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(usertenant.Table, usertenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.UserTenantsTable, tenant.UserTenantsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartments queries the departments edge of a Tenant.
func (c *TenantClient) QueryDepartments(t *Tenant) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.DepartmentsTable, tenant.DepartmentsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// UserDepartmentClient is a client for the UserDepartment schema.
type UserDepartmentClient struct {
	config
}

// NewUserDepartmentClient returns a client for the UserDepartment from the given config.
func NewUserDepartmentClient(c config) *UserDepartmentClient {
	return &UserDepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdepartment.Hooks(f(g(h())))`.
func (c *UserDepartmentClient) Use(hooks ...Hook) {
	c.hooks.UserDepartment = append(c.hooks.UserDepartment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userdepartment.Intercept(f(g(h())))`.
func (c *UserDepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserDepartment = append(c.inters.UserDepartment, interceptors...)
}

// Create returns a builder for creating a UserDepartment entity.
func (c *UserDepartmentClient) Create() *UserDepartmentCreate {
	mutation := newUserDepartmentMutation(c.config, OpCreate)
	return &UserDepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserDepartment entities.
func (c *UserDepartmentClient) CreateBulk(builders ...*UserDepartmentCreate) *UserDepartmentCreateBulk {
	return &UserDepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserDepartmentClient) MapCreateBulk(slice any, setFunc func(*UserDepartmentCreate, int)) *UserDepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserDepartmentCreateBulk{err: fmt.Errorf("calling to UserDepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserDepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserDepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserDepartment.
func (c *UserDepartmentClient) Update() *UserDepartmentUpdate {
	mutation := newUserDepartmentMutation(c.config, OpUpdate)
	return &UserDepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDepartmentClient) UpdateOne(ud *UserDepartment) *UserDepartmentUpdateOne {
	mutation := newUserDepartmentMutation(c.config, OpUpdateOne, withUserDepartment(ud))
	return &UserDepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDepartmentClient) UpdateOneID(id int64) *UserDepartmentUpdateOne {
	mutation := newUserDepartmentMutation(c.config, OpUpdateOne, withUserDepartmentID(id))
	return &UserDepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserDepartment.
func (c *UserDepartmentClient) Delete() *UserDepartmentDelete {
	mutation := newUserDepartmentMutation(c.config, OpDelete)
	return &UserDepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserDepartmentClient) DeleteOne(ud *UserDepartment) *UserDepartmentDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserDepartmentClient) DeleteOneID(id int64) *UserDepartmentDeleteOne {
	builder := c.Delete().Where(userdepartment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDepartmentDeleteOne{builder}
}

// Query returns a query builder for UserDepartment.
func (c *UserDepartmentClient) Query() *UserDepartmentQuery {
	return &UserDepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a UserDepartment entity by its id.
func (c *UserDepartmentClient) Get(ctx context.Context, id int64) (*UserDepartment, error) {
	return c.Query().Where(userdepartment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDepartmentClient) GetX(ctx context.Context, id int64) *UserDepartment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserDepartment.
func (c *UserDepartmentClient) QueryUser(ud *UserDepartment) *SysUserQuery {
	query := (&SysUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdepartment.Table, userdepartment.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdepartment.UserTable, userdepartment.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a UserDepartment.
func (c *UserDepartmentClient) QueryDepartment(ud *UserDepartment) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdepartment.Table, userdepartment.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdepartment.DepartmentTable, userdepartment.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDepartmentClient) Hooks() []Hook {
	return c.hooks.UserDepartment
}

// Interceptors returns the client interceptors.
func (c *UserDepartmentClient) Interceptors() []Interceptor {
	return c.inters.UserDepartment
}

func (c *UserDepartmentClient) mutate(ctx context.Context, m *UserDepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserDepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserDepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserDepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserDepartment mutation op: %q", m.Op())
	}
}

// UserTenantClient is a client for the UserTenant schema.
type UserTenantClient struct {
	config
}

// NewUserTenantClient returns a client for the UserTenant from the given config.
func NewUserTenantClient(c config) *UserTenantClient {
	return &UserTenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertenant.Hooks(f(g(h())))`.
func (c *UserTenantClient) Use(hooks ...Hook) {
	c.hooks.UserTenant = append(c.hooks.UserTenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertenant.Intercept(f(g(h())))`.
func (c *UserTenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTenant = append(c.inters.UserTenant, interceptors...)
}

// Create returns a builder for creating a UserTenant entity.
func (c *UserTenantClient) Create() *UserTenantCreate {
	mutation := newUserTenantMutation(c.config, OpCreate)
	return &UserTenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTenant entities.
func (c *UserTenantClient) CreateBulk(builders ...*UserTenantCreate) *UserTenantCreateBulk {
	return &UserTenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTenantClient) MapCreateBulk(slice any, setFunc func(*UserTenantCreate, int)) *UserTenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTenantCreateBulk{err: fmt.Errorf("calling to UserTenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTenant.
func (c *UserTenantClient) Update() *UserTenantUpdate {
	mutation := newUserTenantMutation(c.config, OpUpdate)
	return &UserTenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTenantClient) UpdateOne(ut *UserTenant) *UserTenantUpdateOne {
	mutation := newUserTenantMutation(c.config, OpUpdateOne, withUserTenant(ut))
	return &UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTenantClient) UpdateOneID(id int64) *UserTenantUpdateOne {
	mutation := newUserTenantMutation(c.config, OpUpdateOne, withUserTenantID(id))
	return &UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTenant.
func (c *UserTenantClient) Delete() *UserTenantDelete {
	mutation := newUserTenantMutation(c.config, OpDelete)
	return &UserTenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTenantClient) DeleteOne(ut *UserTenant) *UserTenantDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTenantClient) DeleteOneID(id int64) *UserTenantDeleteOne {
	builder := c.Delete().Where(usertenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTenantDeleteOne{builder}
}

// Query returns a query builder for UserTenant.
func (c *UserTenantClient) Query() *UserTenantQuery {
	return &UserTenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a UserTenant entity by its id.
func (c *UserTenantClient) Get(ctx context.Context, id int64) (*UserTenant, error) {
	return c.Query().Where(usertenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTenantClient) GetX(ctx context.Context, id int64) *UserTenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserTenant.
func (c *UserTenantClient) QueryUser(ut *UserTenant) *SysUserQuery {
	query := (&SysUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertenant.Table, usertenant.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usertenant.UserTable, usertenant.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a UserTenant.
func (c *UserTenantClient) QueryTenant(ut *UserTenant) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertenant.Table, usertenant.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usertenant.TenantTable, usertenant.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserTenantClient) Hooks() []Hook {
	return c.hooks.UserTenant
}

// Interceptors returns the client interceptors.
func (c *UserTenantClient) Interceptors() []Interceptor {
	return c.inters.UserTenant
}

func (c *UserTenantClient) mutate(ctx context.Context, m *UserTenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTenant mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Department, SysUser, SysUserAccount, Tenant, UserDepartment,
		UserTenant []ent.Hook
	}
	inters struct {
		Department, SysUser, SysUserAccount, Tenant, UserDepartment,
		UserTenant []ent.Interceptor
	}
)
