// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuseraccount"
)

// SysUserAccountCreate is the builder for creating a SysUserAccount entity.
type SysUserAccountCreate struct {
	config
	mutation *SysUserAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (suac *SysUserAccountCreate) SetUserID(i int64) *SysUserAccountCreate {
	suac.mutation.SetUserID(i)
	return suac
}

// SetPlatform sets the "platform" field.
func (suac *SysUserAccountCreate) SetPlatform(s string) *SysUserAccountCreate {
	suac.mutation.SetPlatform(s)
	return suac
}

// SetIdentifier sets the "identifier" field.
func (suac *SysUserAccountCreate) SetIdentifier(s string) *SysUserAccountCreate {
	suac.mutation.SetIdentifier(s)
	return suac
}

// SetName sets the "name" field.
func (suac *SysUserAccountCreate) SetName(s string) *SysUserAccountCreate {
	suac.mutation.SetName(s)
	return suac
}

// SetCreatedAt sets the "created_at" field.
func (suac *SysUserAccountCreate) SetCreatedAt(t time.Time) *SysUserAccountCreate {
	suac.mutation.SetCreatedAt(t)
	return suac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suac *SysUserAccountCreate) SetNillableCreatedAt(t *time.Time) *SysUserAccountCreate {
	if t != nil {
		suac.SetCreatedAt(*t)
	}
	return suac
}

// SetUpdatedAt sets the "updated_at" field.
func (suac *SysUserAccountCreate) SetUpdatedAt(t time.Time) *SysUserAccountCreate {
	suac.mutation.SetUpdatedAt(t)
	return suac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suac *SysUserAccountCreate) SetNillableUpdatedAt(t *time.Time) *SysUserAccountCreate {
	if t != nil {
		suac.SetUpdatedAt(*t)
	}
	return suac
}

// SetDeletedAt sets the "deleted_at" field.
func (suac *SysUserAccountCreate) SetDeletedAt(t time.Time) *SysUserAccountCreate {
	suac.mutation.SetDeletedAt(t)
	return suac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suac *SysUserAccountCreate) SetNillableDeletedAt(t *time.Time) *SysUserAccountCreate {
	if t != nil {
		suac.SetDeletedAt(*t)
	}
	return suac
}

// SetUser sets the "user" edge to the SysUser entity.
func (suac *SysUserAccountCreate) SetUser(s *SysUser) *SysUserAccountCreate {
	return suac.SetUserID(s.ID)
}

// Mutation returns the SysUserAccountMutation object of the builder.
func (suac *SysUserAccountCreate) Mutation() *SysUserAccountMutation {
	return suac.mutation
}

// Save creates the SysUserAccount in the database.
func (suac *SysUserAccountCreate) Save(ctx context.Context) (*SysUserAccount, error) {
	suac.defaults()
	return withHooks(ctx, suac.sqlSave, suac.mutation, suac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suac *SysUserAccountCreate) SaveX(ctx context.Context) *SysUserAccount {
	v, err := suac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suac *SysUserAccountCreate) Exec(ctx context.Context) error {
	_, err := suac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suac *SysUserAccountCreate) ExecX(ctx context.Context) {
	if err := suac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suac *SysUserAccountCreate) defaults() {
	if _, ok := suac.mutation.CreatedAt(); !ok {
		v := sysuseraccount.DefaultCreatedAt()
		suac.mutation.SetCreatedAt(v)
	}
	if _, ok := suac.mutation.UpdatedAt(); !ok {
		v := sysuseraccount.DefaultUpdatedAt()
		suac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suac *SysUserAccountCreate) check() error {
	if _, ok := suac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "SysUserAccount.user_id"`)}
	}
	if v, ok := suac.mutation.UserID(); ok {
		if err := sysuseraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "SysUserAccount.user_id": %w`, err)}
		}
	}
	if _, ok := suac.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "SysUserAccount.platform"`)}
	}
	if _, ok := suac.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "SysUserAccount.identifier"`)}
	}
	if _, ok := suac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysUserAccount.name"`)}
	}
	if _, ok := suac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUserAccount.created_at"`)}
	}
	if _, ok := suac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysUserAccount.updated_at"`)}
	}
	if len(suac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "SysUserAccount.user"`)}
	}
	return nil
}

func (suac *SysUserAccountCreate) sqlSave(ctx context.Context) (*SysUserAccount, error) {
	if err := suac.check(); err != nil {
		return nil, err
	}
	_node, _spec := suac.createSpec()
	if err := sqlgraph.CreateNode(ctx, suac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	suac.mutation.id = &_node.ID
	suac.mutation.done = true
	return _node, nil
}

func (suac *SysUserAccountCreate) createSpec() (*SysUserAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUserAccount{config: suac.config}
		_spec = sqlgraph.NewCreateSpec(sysuseraccount.Table, sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt))
	)
	_spec.OnConflict = suac.conflict
	if value, ok := suac.mutation.Platform(); ok {
		_spec.SetField(sysuseraccount.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := suac.mutation.Identifier(); ok {
		_spec.SetField(sysuseraccount.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := suac.mutation.Name(); ok {
		_spec.SetField(sysuseraccount.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := suac.mutation.CreatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suac.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suac.mutation.DeletedAt(); ok {
		_spec.SetField(sysuseraccount.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := suac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuseraccount.UserTable,
			Columns: []string{sysuseraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUserAccount.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (suac *SysUserAccountCreate) OnConflict(opts ...sql.ConflictOption) *SysUserAccountUpsertOne {
	suac.conflict = opts
	return &SysUserAccountUpsertOne{
		create: suac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suac *SysUserAccountCreate) OnConflictColumns(columns ...string) *SysUserAccountUpsertOne {
	suac.conflict = append(suac.conflict, sql.ConflictColumns(columns...))
	return &SysUserAccountUpsertOne{
		create: suac,
	}
}

type (
	// SysUserAccountUpsertOne is the builder for "upsert"-ing
	//  one SysUserAccount node.
	SysUserAccountUpsertOne struct {
		create *SysUserAccountCreate
	}

	// SysUserAccountUpsert is the "OnConflict" setter.
	SysUserAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *SysUserAccountUpsert) SetUserID(v int64) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateUserID() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldUserID)
	return u
}

// SetPlatform sets the "platform" field.
func (u *SysUserAccountUpsert) SetPlatform(v string) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdatePlatform() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldPlatform)
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *SysUserAccountUpsert) SetIdentifier(v string) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateIdentifier() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldIdentifier)
	return u
}

// SetName sets the "name" field.
func (u *SysUserAccountUpsert) SetName(v string) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateName() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldName)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserAccountUpsert) SetCreatedAt(v time.Time) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateCreatedAt() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserAccountUpsert) SetUpdatedAt(v time.Time) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateUpdatedAt() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserAccountUpsert) SetDeletedAt(v time.Time) *SysUserAccountUpsert {
	u.Set(sysuseraccount.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserAccountUpsert) UpdateDeletedAt() *SysUserAccountUpsert {
	u.SetExcluded(sysuseraccount.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserAccountUpsert) ClearDeletedAt() *SysUserAccountUpsert {
	u.SetNull(sysuseraccount.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SysUserAccountUpsertOne) UpdateNewValues() *SysUserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysUserAccountUpsertOne) Ignore() *SysUserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserAccountUpsertOne) DoNothing() *SysUserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserAccountCreate.OnConflict
// documentation for more info.
func (u *SysUserAccountUpsertOne) Update(set func(*SysUserAccountUpsert)) *SysUserAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *SysUserAccountUpsertOne) SetUserID(v int64) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateUserID() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *SysUserAccountUpsertOne) SetPlatform(v string) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdatePlatform() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdatePlatform()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *SysUserAccountUpsertOne) SetIdentifier(v string) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateIdentifier() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateIdentifier()
	})
}

// SetName sets the "name" field.
func (u *SysUserAccountUpsertOne) SetName(v string) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateName() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserAccountUpsertOne) SetCreatedAt(v time.Time) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateCreatedAt() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserAccountUpsertOne) SetUpdatedAt(v time.Time) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateUpdatedAt() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserAccountUpsertOne) SetDeletedAt(v time.Time) *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertOne) UpdateDeletedAt() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserAccountUpsertOne) ClearDeletedAt() *SysUserAccountUpsertOne {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysUserAccountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysUserAccountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysUserAccountCreateBulk is the builder for creating many SysUserAccount entities in bulk.
type SysUserAccountCreateBulk struct {
	config
	err      error
	builders []*SysUserAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the SysUserAccount entities in the database.
func (suacb *SysUserAccountCreateBulk) Save(ctx context.Context) ([]*SysUserAccount, error) {
	if suacb.err != nil {
		return nil, suacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(suacb.builders))
	nodes := make([]*SysUserAccount, len(suacb.builders))
	mutators := make([]Mutator, len(suacb.builders))
	for i := range suacb.builders {
		func(i int, root context.Context) {
			builder := suacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, suacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = suacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, suacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, suacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (suacb *SysUserAccountCreateBulk) SaveX(ctx context.Context) []*SysUserAccount {
	v, err := suacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suacb *SysUserAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := suacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suacb *SysUserAccountCreateBulk) ExecX(ctx context.Context) {
	if err := suacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUserAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (suacb *SysUserAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysUserAccountUpsertBulk {
	suacb.conflict = opts
	return &SysUserAccountUpsertBulk{
		create: suacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suacb *SysUserAccountCreateBulk) OnConflictColumns(columns ...string) *SysUserAccountUpsertBulk {
	suacb.conflict = append(suacb.conflict, sql.ConflictColumns(columns...))
	return &SysUserAccountUpsertBulk{
		create: suacb,
	}
}

// SysUserAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of SysUserAccount nodes.
type SysUserAccountUpsertBulk struct {
	create *SysUserAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SysUserAccountUpsertBulk) UpdateNewValues() *SysUserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUserAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysUserAccountUpsertBulk) Ignore() *SysUserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserAccountUpsertBulk) DoNothing() *SysUserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserAccountCreateBulk.OnConflict
// documentation for more info.
func (u *SysUserAccountUpsertBulk) Update(set func(*SysUserAccountUpsert)) *SysUserAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *SysUserAccountUpsertBulk) SetUserID(v int64) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateUserID() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetPlatform sets the "platform" field.
func (u *SysUserAccountUpsertBulk) SetPlatform(v string) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdatePlatform() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdatePlatform()
	})
}

// SetIdentifier sets the "identifier" field.
func (u *SysUserAccountUpsertBulk) SetIdentifier(v string) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateIdentifier() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateIdentifier()
	})
}

// SetName sets the "name" field.
func (u *SysUserAccountUpsertBulk) SetName(v string) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateName() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateName()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SysUserAccountUpsertBulk) SetCreatedAt(v time.Time) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateCreatedAt() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserAccountUpsertBulk) SetUpdatedAt(v time.Time) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateUpdatedAt() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserAccountUpsertBulk) SetDeletedAt(v time.Time) *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserAccountUpsertBulk) UpdateDeletedAt() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserAccountUpsertBulk) ClearDeletedAt() *SysUserAccountUpsertBulk {
	return u.Update(func(s *SysUserAccountUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysUserAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
