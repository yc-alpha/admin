// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/usertenant"
)

// UserTenant is the model entity for the UserTenant schema.
type UserTenant struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SysUser ID
	UserID int64 `json:"user_id,omitempty"`
	// Tenant ID
	TenantID int64 `json:"tenant_id,omitempty"`
	// RoleLabels holds the value of the "role_labels" field.
	RoleLabels []string `json:"role_labels,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTenantQuery when eager-loading is set.
	Edges        UserTenantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserTenantEdges holds the relations/edges for other nodes in the graph.
type UserTenantEdges struct {
	// User holds the value of the user edge.
	User *SysUser `json:"user,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTenantEdges) UserOrErr() (*SysUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sysuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTenantEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertenant.FieldRoleLabels:
			values[i] = new([]byte)
		case usertenant.FieldID, usertenant.FieldUserID, usertenant.FieldTenantID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTenant fields.
func (ut *UserTenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ut.ID = int64(value.Int64)
		case usertenant.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ut.UserID = value.Int64
			}
		case usertenant.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ut.TenantID = value.Int64
			}
		case usertenant.FieldRoleLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field role_labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ut.RoleLabels); err != nil {
					return fmt.Errorf("unmarshal field role_labels: %w", err)
				}
			}
		default:
			ut.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserTenant.
// This includes values selected through modifiers, order, etc.
func (ut *UserTenant) Value(name string) (ent.Value, error) {
	return ut.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserTenant entity.
func (ut *UserTenant) QueryUser() *SysUserQuery {
	return NewUserTenantClient(ut.config).QueryUser(ut)
}

// QueryTenant queries the "tenant" edge of the UserTenant entity.
func (ut *UserTenant) QueryTenant() *TenantQuery {
	return NewUserTenantClient(ut.config).QueryTenant(ut)
}

// Update returns a builder for updating this UserTenant.
// Note that you need to call UserTenant.Unwrap() before calling this method if this UserTenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserTenant) Update() *UserTenantUpdateOne {
	return NewUserTenantClient(ut.config).UpdateOne(ut)
}

// Unwrap unwraps the UserTenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ut *UserTenant) Unwrap() *UserTenant {
	_tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTenant is not a transactional entity")
	}
	ut.config.driver = _tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserTenant) String() string {
	var builder strings.Builder
	builder.WriteString("UserTenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ut.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.UserID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.TenantID))
	builder.WriteString(", ")
	builder.WriteString("role_labels=")
	builder.WriteString(fmt.Sprintf("%v", ut.RoleLabels))
	builder.WriteByte(')')
	return builder.String()
}

// UserTenants is a parsable slice of UserTenant.
type UserTenants []*UserTenant
