// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/usertenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetOwnerID sets the "owner_id" field.
func (tu *TenantUpdate) SetOwnerID(i int64) *TenantUpdate {
	tu.mutation.ResetOwnerID()
	tu.mutation.SetOwnerID(i)
	return tu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableOwnerID(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetOwnerID(*i)
	}
	return tu
}

// AddOwnerID adds i to the "owner_id" field.
func (tu *TenantUpdate) AddOwnerID(i int64) *TenantUpdate {
	tu.mutation.AddOwnerID(i)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TenantUpdate) SetStatus(t tenant.Status) *TenantUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableStatus(t *tenant.Status) *TenantUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetExpiredAt sets the "expired_at" field.
func (tu *TenantUpdate) SetExpiredAt(t time.Time) *TenantUpdate {
	tu.mutation.SetExpiredAt(t)
	return tu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableExpiredAt(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetExpiredAt(*t)
	}
	return tu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (tu *TenantUpdate) ClearExpiredAt() *TenantUpdate {
	tu.mutation.ClearExpiredAt()
	return tu
}

// SetAttributes sets the "attributes" field.
func (tu *TenantUpdate) SetAttributes(m map[string]interface{}) *TenantUpdate {
	tu.mutation.SetAttributes(m)
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TenantUpdate) SetCreatedBy(i int64) *TenantUpdate {
	tu.mutation.ResetCreatedBy()
	tu.mutation.SetCreatedBy(i)
	return tu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCreatedBy(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetCreatedBy(*i)
	}
	return tu
}

// AddCreatedBy adds i to the "created_by" field.
func (tu *TenantUpdate) AddCreatedBy(i int64) *TenantUpdate {
	tu.mutation.AddCreatedBy(i)
	return tu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tu *TenantUpdate) ClearCreatedBy() *TenantUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *TenantUpdate) SetUpdatedBy(i int64) *TenantUpdate {
	tu.mutation.ResetUpdatedBy()
	tu.mutation.SetUpdatedBy(i)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableUpdatedBy(i *int64) *TenantUpdate {
	if i != nil {
		tu.SetUpdatedBy(*i)
	}
	return tu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tu *TenantUpdate) AddUpdatedBy(i int64) *TenantUpdate {
	tu.mutation.AddUpdatedBy(i)
	return tu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tu *TenantUpdate) ClearUpdatedBy() *TenantUpdate {
	tu.mutation.ClearUpdatedBy()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TenantUpdate) SetDeletedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDeletedAt(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TenantUpdate) ClearDeletedAt() *TenantUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// AddUserTenantIDs adds the "user_tenants" edge to the UserTenant entity by IDs.
func (tu *TenantUpdate) AddUserTenantIDs(ids ...int64) *TenantUpdate {
	tu.mutation.AddUserTenantIDs(ids...)
	return tu
}

// AddUserTenants adds the "user_tenants" edges to the UserTenant entity.
func (tu *TenantUpdate) AddUserTenants(u ...*UserTenant) *TenantUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserTenantIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (tu *TenantUpdate) AddDepartmentIDs(ids ...int64) *TenantUpdate {
	tu.mutation.AddDepartmentIDs(ids...)
	return tu
}

// AddDepartments adds the "departments" edges to the Department entity.
func (tu *TenantUpdate) AddDepartments(d ...*Department) *TenantUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.AddDepartmentIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearUserTenants clears all "user_tenants" edges to the UserTenant entity.
func (tu *TenantUpdate) ClearUserTenants() *TenantUpdate {
	tu.mutation.ClearUserTenants()
	return tu
}

// RemoveUserTenantIDs removes the "user_tenants" edge to UserTenant entities by IDs.
func (tu *TenantUpdate) RemoveUserTenantIDs(ids ...int64) *TenantUpdate {
	tu.mutation.RemoveUserTenantIDs(ids...)
	return tu
}

// RemoveUserTenants removes "user_tenants" edges to UserTenant entities.
func (tu *TenantUpdate) RemoveUserTenants(u ...*UserTenant) *TenantUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserTenantIDs(ids...)
}

// ClearDepartments clears all "departments" edges to the Department entity.
func (tu *TenantUpdate) ClearDepartments() *TenantUpdate {
	tu.mutation.ClearDepartments()
	return tu
}

// RemoveDepartmentIDs removes the "departments" edge to Department entities by IDs.
func (tu *TenantUpdate) RemoveDepartmentIDs(ids ...int64) *TenantUpdate {
	tu.mutation.RemoveDepartmentIDs(ids...)
	return tu
}

// RemoveDepartments removes "departments" edges to Department entities.
func (tu *TenantUpdate) RemoveDepartments(d ...*Department) *TenantUpdate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.RemoveDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.OwnerID(); ok {
		_spec.SetField(tenant.FieldOwnerID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedOwnerID(); ok {
		_spec.AddField(tenant.FieldOwnerID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
	}
	if tu.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Attributes(); ok {
		_spec.SetField(tenant.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(tenant.FieldCreatedBy, field.TypeInt64, value)
	}
	if tu.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(tenant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if tu.mutation.UpdatedByCleared() {
		_spec.ClearField(tenant.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if tu.mutation.UserTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUserTenantsIDs(); len(nodes) > 0 && !tu.mutation.UserTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 && !tu.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetOwnerID sets the "owner_id" field.
func (tuo *TenantUpdateOne) SetOwnerID(i int64) *TenantUpdateOne {
	tuo.mutation.ResetOwnerID()
	tuo.mutation.SetOwnerID(i)
	return tuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableOwnerID(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetOwnerID(*i)
	}
	return tuo
}

// AddOwnerID adds i to the "owner_id" field.
func (tuo *TenantUpdateOne) AddOwnerID(i int64) *TenantUpdateOne {
	tuo.mutation.AddOwnerID(i)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TenantUpdateOne) SetStatus(t tenant.Status) *TenantUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableStatus(t *tenant.Status) *TenantUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetExpiredAt sets the "expired_at" field.
func (tuo *TenantUpdateOne) SetExpiredAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetExpiredAt(t)
	return tuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableExpiredAt(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetExpiredAt(*t)
	}
	return tuo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (tuo *TenantUpdateOne) ClearExpiredAt() *TenantUpdateOne {
	tuo.mutation.ClearExpiredAt()
	return tuo
}

// SetAttributes sets the "attributes" field.
func (tuo *TenantUpdateOne) SetAttributes(m map[string]interface{}) *TenantUpdateOne {
	tuo.mutation.SetAttributes(m)
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TenantUpdateOne) SetCreatedBy(i int64) *TenantUpdateOne {
	tuo.mutation.ResetCreatedBy()
	tuo.mutation.SetCreatedBy(i)
	return tuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCreatedBy(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetCreatedBy(*i)
	}
	return tuo
}

// AddCreatedBy adds i to the "created_by" field.
func (tuo *TenantUpdateOne) AddCreatedBy(i int64) *TenantUpdateOne {
	tuo.mutation.AddCreatedBy(i)
	return tuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tuo *TenantUpdateOne) ClearCreatedBy() *TenantUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *TenantUpdateOne) SetUpdatedBy(i int64) *TenantUpdateOne {
	tuo.mutation.ResetUpdatedBy()
	tuo.mutation.SetUpdatedBy(i)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableUpdatedBy(i *int64) *TenantUpdateOne {
	if i != nil {
		tuo.SetUpdatedBy(*i)
	}
	return tuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tuo *TenantUpdateOne) AddUpdatedBy(i int64) *TenantUpdateOne {
	tuo.mutation.AddUpdatedBy(i)
	return tuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tuo *TenantUpdateOne) ClearUpdatedBy() *TenantUpdateOne {
	tuo.mutation.ClearUpdatedBy()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TenantUpdateOne) SetDeletedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDeletedAt(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TenantUpdateOne) ClearDeletedAt() *TenantUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// AddUserTenantIDs adds the "user_tenants" edge to the UserTenant entity by IDs.
func (tuo *TenantUpdateOne) AddUserTenantIDs(ids ...int64) *TenantUpdateOne {
	tuo.mutation.AddUserTenantIDs(ids...)
	return tuo
}

// AddUserTenants adds the "user_tenants" edges to the UserTenant entity.
func (tuo *TenantUpdateOne) AddUserTenants(u ...*UserTenant) *TenantUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserTenantIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (tuo *TenantUpdateOne) AddDepartmentIDs(ids ...int64) *TenantUpdateOne {
	tuo.mutation.AddDepartmentIDs(ids...)
	return tuo
}

// AddDepartments adds the "departments" edges to the Department entity.
func (tuo *TenantUpdateOne) AddDepartments(d ...*Department) *TenantUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.AddDepartmentIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearUserTenants clears all "user_tenants" edges to the UserTenant entity.
func (tuo *TenantUpdateOne) ClearUserTenants() *TenantUpdateOne {
	tuo.mutation.ClearUserTenants()
	return tuo
}

// RemoveUserTenantIDs removes the "user_tenants" edge to UserTenant entities by IDs.
func (tuo *TenantUpdateOne) RemoveUserTenantIDs(ids ...int64) *TenantUpdateOne {
	tuo.mutation.RemoveUserTenantIDs(ids...)
	return tuo
}

// RemoveUserTenants removes "user_tenants" edges to UserTenant entities.
func (tuo *TenantUpdateOne) RemoveUserTenants(u ...*UserTenant) *TenantUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserTenantIDs(ids...)
}

// ClearDepartments clears all "departments" edges to the Department entity.
func (tuo *TenantUpdateOne) ClearDepartments() *TenantUpdateOne {
	tuo.mutation.ClearDepartments()
	return tuo
}

// RemoveDepartmentIDs removes the "departments" edge to Department entities by IDs.
func (tuo *TenantUpdateOne) RemoveDepartmentIDs(ids ...int64) *TenantUpdateOne {
	tuo.mutation.RemoveDepartmentIDs(ids...)
	return tuo
}

// RemoveDepartments removes "departments" edges to Department entities.
func (tuo *TenantUpdateOne) RemoveDepartments(d ...*Department) *TenantUpdateOne {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.RemoveDepartmentIDs(ids...)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.OwnerID(); ok {
		_spec.SetField(tenant.FieldOwnerID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedOwnerID(); ok {
		_spec.AddField(tenant.FieldOwnerID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
	}
	if tuo.mutation.ExpiredAtCleared() {
		_spec.ClearField(tenant.FieldExpiredAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Attributes(); ok {
		_spec.SetField(tenant.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(tenant.FieldCreatedBy, field.TypeInt64, value)
	}
	if tuo.mutation.CreatedByCleared() {
		_spec.ClearField(tenant.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(tenant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if tuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tenant.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if tuo.mutation.UserTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUserTenantsIDs(); len(nodes) > 0 && !tuo.mutation.UserTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDepartmentsIDs(); len(nodes) > 0 && !tuo.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
