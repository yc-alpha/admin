// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/department"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/tenant"
	"github.com/yc-alpha/admin/app/admin/internal/data/ent/usertenant"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TenantCreate) SetName(s string) *TenantCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetOwnerID sets the "owner_id" field.
func (tc *TenantCreate) SetOwnerID(i int64) *TenantCreate {
	tc.mutation.SetOwnerID(i)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TenantCreate) SetStatus(t tenant.Status) *TenantCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TenantCreate) SetNillableStatus(t *tenant.Status) *TenantCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetExpiredAt sets the "expired_at" field.
func (tc *TenantCreate) SetExpiredAt(t time.Time) *TenantCreate {
	tc.mutation.SetExpiredAt(t)
	return tc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableExpiredAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetExpiredAt(*t)
	}
	return tc
}

// SetAttributes sets the "attributes" field.
func (tc *TenantCreate) SetAttributes(m map[string]interface{}) *TenantCreate {
	tc.mutation.SetAttributes(m)
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TenantCreate) SetCreatedBy(i int64) *TenantCreate {
	tc.mutation.SetCreatedBy(i)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreatedBy(i *int64) *TenantCreate {
	if i != nil {
		tc.SetCreatedBy(*i)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TenantCreate) SetUpdatedBy(i int64) *TenantCreate {
	tc.mutation.SetUpdatedBy(i)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdatedBy(i *int64) *TenantCreate {
	if i != nil {
		tc.SetUpdatedBy(*i)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TenantCreate) SetCreatedAt(t time.Time) *TenantCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreatedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TenantCreate) SetUpdatedAt(t time.Time) *TenantCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdatedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TenantCreate) SetDeletedAt(t time.Time) *TenantCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDeletedAt(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantCreate) SetID(i int64) *TenantCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TenantCreate) SetNillableID(i *int64) *TenantCreate {
	if i != nil {
		tc.SetID(*i)
	}
	return tc
}

// AddUserTenantIDs adds the "user_tenants" edge to the UserTenant entity by IDs.
func (tc *TenantCreate) AddUserTenantIDs(ids ...int64) *TenantCreate {
	tc.mutation.AddUserTenantIDs(ids...)
	return tc
}

// AddUserTenants adds the "user_tenants" edges to the UserTenant entity.
func (tc *TenantCreate) AddUserTenants(u ...*UserTenant) *TenantCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddUserTenantIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (tc *TenantCreate) AddDepartmentIDs(ids ...int64) *TenantCreate {
	tc.mutation.AddDepartmentIDs(ids...)
	return tc
}

// AddDepartments adds the "departments" edges to the Department entity.
func (tc *TenantCreate) AddDepartments(d ...*Department) *TenantCreate {
	ids := make([]int64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tc.AddDepartmentIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tc *TenantCreate) Mutation() *TenantMutation {
	return tc.mutation
}

// Save creates the Tenant in the database.
func (tc *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantCreate) defaults() {
	if _, ok := tc.mutation.Status(); !ok {
		v := tenant.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Attributes(); !ok {
		v := tenant.DefaultAttributes
		tc.mutation.SetAttributes(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tenant.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tenant.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := tenant.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tenant.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Tenant.owner_id"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Tenant.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Attributes(); !ok {
		return &ValidationError{Name: "attributes", err: errors.New(`ent: missing required field "Tenant.attributes"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tenant.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tenant.updated_at"`)}
	}
	return nil
}

func (tc *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tenant.Table, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.OwnerID(); ok {
		_spec.SetField(tenant.FieldOwnerID, field.TypeInt64, value)
		_node.OwnerID = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.ExpiredAt(); ok {
		_spec.SetField(tenant.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	if value, ok := tc.mutation.Attributes(); ok {
		_spec.SetField(tenant.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(tenant.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = &value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(tenant.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = &value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tenant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := tc.mutation.UserTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UserTenantsTable,
			Columns: []string{tenant.UserTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertenant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.DepartmentsTable,
			Columns: []string{tenant.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TenantCreate) OnConflict(opts ...sql.ConflictOption) *TenantUpsertOne {
	tc.conflict = opts
	return &TenantUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TenantCreate) OnConflictColumns(columns ...string) *TenantUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertOne{
		create: tc,
	}
}

type (
	// TenantUpsertOne is the builder for "upsert"-ing
	//  one Tenant node.
	TenantUpsertOne struct {
		create *TenantCreate
	}

	// TenantUpsert is the "OnConflict" setter.
	TenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TenantUpsert) SetName(v string) *TenantUpsert {
	u.Set(tenant.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsert) UpdateName() *TenantUpsert {
	u.SetExcluded(tenant.FieldName)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *TenantUpsert) SetOwnerID(v int64) *TenantUpsert {
	u.Set(tenant.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *TenantUpsert) UpdateOwnerID() *TenantUpsert {
	u.SetExcluded(tenant.FieldOwnerID)
	return u
}

// AddOwnerID adds v to the "owner_id" field.
func (u *TenantUpsert) AddOwnerID(v int64) *TenantUpsert {
	u.Add(tenant.FieldOwnerID, v)
	return u
}

// SetStatus sets the "status" field.
func (u *TenantUpsert) SetStatus(v tenant.Status) *TenantUpsert {
	u.Set(tenant.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsert) UpdateStatus() *TenantUpsert {
	u.SetExcluded(tenant.FieldStatus)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsert) SetExpiredAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateExpiredAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsert) ClearExpiredAt() *TenantUpsert {
	u.SetNull(tenant.FieldExpiredAt)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *TenantUpsert) SetAttributes(v map[string]interface{}) *TenantUpsert {
	u.Set(tenant.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *TenantUpsert) UpdateAttributes() *TenantUpsert {
	u.SetExcluded(tenant.FieldAttributes)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TenantUpsert) SetCreatedBy(v int64) *TenantUpsert {
	u.Set(tenant.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCreatedBy() *TenantUpsert {
	u.SetExcluded(tenant.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TenantUpsert) AddCreatedBy(v int64) *TenantUpsert {
	u.Add(tenant.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TenantUpsert) ClearCreatedBy() *TenantUpsert {
	u.SetNull(tenant.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TenantUpsert) SetUpdatedBy(v int64) *TenantUpsert {
	u.Set(tenant.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdatedBy() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TenantUpsert) AddUpdatedBy(v int64) *TenantUpsert {
	u.Add(tenant.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TenantUpsert) ClearUpdatedBy() *TenantUpsert {
	u.SetNull(tenant.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsert) SetUpdatedAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdatedAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsert) SetDeletedAt(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsert) UpdateDeletedAt() *TenantUpsert {
	u.SetExcluded(tenant.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsert) ClearDeletedAt() *TenantUpsert {
	u.SetNull(tenant.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertOne) UpdateNewValues() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenant.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tenant.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantUpsertOne) Ignore() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertOne) DoNothing() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreate.OnConflict
// documentation for more info.
func (u *TenantUpsertOne) Update(set func(*TenantUpsert)) *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsertOne) SetName(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *TenantUpsertOne) SetOwnerID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetOwnerID(v)
	})
}

// AddOwnerID adds v to the "owner_id" field.
func (u *TenantUpsertOne) AddOwnerID(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateOwnerID() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateOwnerID()
	})
}

// SetStatus sets the "status" field.
func (u *TenantUpsertOne) SetStatus(v tenant.Status) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateStatus() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStatus()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsertOne) SetExpiredAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateExpiredAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsertOne) ClearExpiredAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearExpiredAt()
	})
}

// SetAttributes sets the "attributes" field.
func (u *TenantUpsertOne) SetAttributes(v map[string]interface{}) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateAttributes() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAttributes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TenantUpsertOne) SetCreatedBy(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TenantUpsertOne) AddCreatedBy(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCreatedBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TenantUpsertOne) ClearCreatedBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TenantUpsertOne) SetUpdatedBy(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TenantUpsertOne) AddUpdatedBy(v int64) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdatedBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TenantUpsertOne) ClearUpdatedBy() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsertOne) SetUpdatedAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdatedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsertOne) SetDeletedAt(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateDeletedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsertOne) ClearDeletedAt() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	err      error
	builders []*TenantCreate
	conflict []sql.ConflictOption
}

// Save creates the Tenant entities in the database.
func (tcb *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUpsertBulk {
	tcb.conflict = opts
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TenantCreateBulk) OnConflictColumns(columns ...string) *TenantUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// TenantUpsertBulk is the builder for "upsert"-ing
// a bulk of Tenant nodes.
type TenantUpsertBulk struct {
	create *TenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUpsertBulk) UpdateNewValues() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenant.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tenant.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantUpsertBulk) Ignore() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertBulk) DoNothing() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUpsertBulk) Update(set func(*TenantUpsert)) *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsertBulk) SetName(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *TenantUpsertBulk) SetOwnerID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetOwnerID(v)
	})
}

// AddOwnerID adds v to the "owner_id" field.
func (u *TenantUpsertBulk) AddOwnerID(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateOwnerID() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateOwnerID()
	})
}

// SetStatus sets the "status" field.
func (u *TenantUpsertBulk) SetStatus(v tenant.Status) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateStatus() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateStatus()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *TenantUpsertBulk) SetExpiredAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateExpiredAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *TenantUpsertBulk) ClearExpiredAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearExpiredAt()
	})
}

// SetAttributes sets the "attributes" field.
func (u *TenantUpsertBulk) SetAttributes(v map[string]interface{}) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateAttributes() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateAttributes()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TenantUpsertBulk) SetCreatedBy(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *TenantUpsertBulk) AddCreatedBy(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCreatedBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TenantUpsertBulk) ClearCreatedBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TenantUpsertBulk) SetUpdatedBy(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *TenantUpsertBulk) AddUpdatedBy(v int64) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdatedBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *TenantUpsertBulk) ClearUpdatedBy() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantUpsertBulk) SetUpdatedAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdatedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TenantUpsertBulk) SetDeletedAt(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateDeletedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TenantUpsertBulk) ClearDeletedAt() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TenantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
