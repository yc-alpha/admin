// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuseraccount"
)

// SysUserCreate is the builder for creating a SysUser entity.
type SysUserCreate struct {
	config
	mutation *SysUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (suc *SysUserCreate) SetUsername(s string) *SysUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetEmail sets the "email" field.
func (suc *SysUserCreate) SetEmail(s string) *SysUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetPhone sets the "phone" field.
func (suc *SysUserCreate) SetPhone(s string) *SysUserCreate {
	suc.mutation.SetPhone(s)
	return suc
}

// SetPassword sets the "password" field.
func (suc *SysUserCreate) SetPassword(s string) *SysUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetStatus sets the "status" field.
func (suc *SysUserCreate) SetStatus(s sysuser.Status) *SysUserCreate {
	suc.mutation.SetStatus(s)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableStatus(s *sysuser.Status) *SysUserCreate {
	if s != nil {
		suc.SetStatus(*s)
	}
	return suc
}

// SetFullName sets the "full_name" field.
func (suc *SysUserCreate) SetFullName(s string) *SysUserCreate {
	suc.mutation.SetFullName(s)
	return suc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableFullName(s *string) *SysUserCreate {
	if s != nil {
		suc.SetFullName(*s)
	}
	return suc
}

// SetGender sets the "gender" field.
func (suc *SysUserCreate) SetGender(s sysuser.Gender) *SysUserCreate {
	suc.mutation.SetGender(s)
	return suc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableGender(s *sysuser.Gender) *SysUserCreate {
	if s != nil {
		suc.SetGender(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SysUserCreate) SetAvatar(s string) *SysUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableAvatar(s *string) *SysUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetLanguage sets the "language" field.
func (suc *SysUserCreate) SetLanguage(s string) *SysUserCreate {
	suc.mutation.SetLanguage(s)
	return suc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableLanguage(s *string) *SysUserCreate {
	if s != nil {
		suc.SetLanguage(*s)
	}
	return suc
}

// SetTimezone sets the "timezone" field.
func (suc *SysUserCreate) SetTimezone(s string) *SysUserCreate {
	suc.mutation.SetTimezone(s)
	return suc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableTimezone(s *string) *SysUserCreate {
	if s != nil {
		suc.SetTimezone(*s)
	}
	return suc
}

// SetCreatedBy sets the "created_by" field.
func (suc *SysUserCreate) SetCreatedBy(i int64) *SysUserCreate {
	suc.mutation.SetCreatedBy(i)
	return suc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCreatedBy(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetCreatedBy(*i)
	}
	return suc
}

// SetUpdatedBy sets the "updated_by" field.
func (suc *SysUserCreate) SetUpdatedBy(i int64) *SysUserCreate {
	suc.mutation.SetUpdatedBy(i)
	return suc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUpdatedBy(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetUpdatedBy(*i)
	}
	return suc
}

// SetCreatedAt sets the "created_at" field.
func (suc *SysUserCreate) SetCreatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCreatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SysUserCreate) SetUpdatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUpdatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *SysUserCreate) SetDeletedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetDeletedAt(t)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDeletedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetDeletedAt(*t)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *SysUserCreate) SetID(i int64) *SysUserCreate {
	suc.mutation.SetID(i)
	return suc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableID(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetID(*i)
	}
	return suc
}

// AddAccountIDs adds the "accounts" edge to the SysUserAccount entity by IDs.
func (suc *SysUserCreate) AddAccountIDs(ids ...int) *SysUserCreate {
	suc.mutation.AddAccountIDs(ids...)
	return suc
}

// AddAccounts adds the "accounts" edges to the SysUserAccount entity.
func (suc *SysUserCreate) AddAccounts(s ...*SysUserAccount) *SysUserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suc.AddAccountIDs(ids...)
}

// Mutation returns the SysUserMutation object of the builder.
func (suc *SysUserCreate) Mutation() *SysUserMutation {
	return suc.mutation
}

// Save creates the SysUser in the database.
func (suc *SysUserCreate) Save(ctx context.Context) (*SysUser, error) {
	if err := suc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SysUserCreate) SaveX(ctx context.Context) *SysUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SysUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SysUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SysUserCreate) defaults() error {
	if _, ok := suc.mutation.Status(); !ok {
		v := sysuser.DefaultStatus
		suc.mutation.SetStatus(v)
	}
	if _, ok := suc.mutation.Gender(); !ok {
		v := sysuser.DefaultGender
		suc.mutation.SetGender(v)
	}
	if _, ok := suc.mutation.Language(); !ok {
		v := sysuser.DefaultLanguage
		suc.mutation.SetLanguage(v)
	}
	if _, ok := suc.mutation.Timezone(); !ok {
		v := sysuser.DefaultTimezone
		suc.mutation.SetTimezone(v)
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		if sysuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		if sysuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.ID(); !ok {
		if sysuser.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultID (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultID()
		suc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suc *SysUserCreate) check() error {
	if _, ok := suc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SysUser.username"`)}
	}
	if v, ok := suc.mutation.Username(); ok {
		if err := sysuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SysUser.username": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "SysUser.email"`)}
	}
	if v, ok := suc.mutation.Email(); ok {
		if err := sysuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SysUser.email": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "SysUser.phone"`)}
	}
	if v, ok := suc.mutation.Phone(); ok {
		if err := sysuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SysUser.phone": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SysUser.password"`)}
	}
	if v, ok := suc.mutation.Password(); ok {
		if err := sysuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "SysUser.password": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SysUser.status"`)}
	}
	if v, ok := suc.mutation.Status(); ok {
		if err := sysuser.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysUser.status": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "SysUser.gender"`)}
	}
	if v, ok := suc.mutation.Gender(); ok {
		if err := sysuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "SysUser.gender": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "SysUser.language"`)}
	}
	if v, ok := suc.mutation.Language(); ok {
		if err := sysuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "SysUser.language": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "SysUser.timezone"`)}
	}
	if v, ok := suc.mutation.Timezone(); ok {
		if err := sysuser.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "SysUser.timezone": %w`, err)}
		}
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysUser.updated_at"`)}
	}
	return nil
}

func (suc *SysUserCreate) sqlSave(ctx context.Context) (*SysUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SysUserCreate) createSpec() (*SysUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(sysuser.Table, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = suc.conflict
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := suc.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := suc.mutation.FullName(); ok {
		_spec.SetField(sysuser.FieldFullName, field.TypeString, value)
		_node.FullName = &value
	}
	if value, ok := suc.mutation.Gender(); ok {
		_spec.SetField(sysuser.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := suc.mutation.Language(); ok {
		_spec.SetField(sysuser.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := suc.mutation.Timezone(); ok {
		_spec.SetField(sysuser.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := suc.mutation.CreatedBy(); ok {
		_spec.SetField(sysuser.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = &value
	}
	if value, ok := suc.mutation.UpdatedBy(); ok {
		_spec.SetField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = &value
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := suc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.AccountsTable,
			Columns: []string{sysuser.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertOne {
	suc.conflict = opts
	return &SysUserUpsertOne{
		create: suc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflictColumns(columns ...string) *SysUserUpsertOne {
	suc.conflict = append(suc.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertOne{
		create: suc,
	}
}

type (
	// SysUserUpsertOne is the builder for "upsert"-ing
	//  one SysUser node.
	SysUserUpsertOne struct {
		create *SysUserCreate
	}

	// SysUserUpsert is the "OnConflict" setter.
	SysUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *SysUserUpsert) SetUsername(v string) *SysUserUpsert {
	u.Set(sysuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUsername() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUsername)
	return u
}

// SetEmail sets the "email" field.
func (u *SysUserUpsert) SetEmail(v string) *SysUserUpsert {
	u.Set(sysuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateEmail() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsert) SetPhone(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePhone() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPhone)
	return u
}

// SetPassword sets the "password" field.
func (u *SysUserUpsert) SetPassword(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePassword() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPassword)
	return u
}

// SetStatus sets the "status" field.
func (u *SysUserUpsert) SetStatus(v sysuser.Status) *SysUserUpsert {
	u.Set(sysuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateStatus() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldStatus)
	return u
}

// SetFullName sets the "full_name" field.
func (u *SysUserUpsert) SetFullName(v string) *SysUserUpsert {
	u.Set(sysuser.FieldFullName, v)
	return u
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateFullName() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldFullName)
	return u
}

// ClearFullName clears the value of the "full_name" field.
func (u *SysUserUpsert) ClearFullName() *SysUserUpsert {
	u.SetNull(sysuser.FieldFullName)
	return u
}

// SetGender sets the "gender" field.
func (u *SysUserUpsert) SetGender(v sysuser.Gender) *SysUserUpsert {
	u.Set(sysuser.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateGender() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldGender)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsert) SetAvatar(v string) *SysUserUpsert {
	u.Set(sysuser.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateAvatar() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsert) ClearAvatar() *SysUserUpsert {
	u.SetNull(sysuser.FieldAvatar)
	return u
}

// SetLanguage sets the "language" field.
func (u *SysUserUpsert) SetLanguage(v string) *SysUserUpsert {
	u.Set(sysuser.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateLanguage() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldLanguage)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *SysUserUpsert) SetTimezone(v string) *SysUserUpsert {
	u.Set(sysuser.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateTimezone() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldTimezone)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SysUserUpsert) SetCreatedBy(v int64) *SysUserUpsert {
	u.Set(sysuser.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateCreatedBy() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SysUserUpsert) AddCreatedBy(v int64) *SysUserUpsert {
	u.Add(sysuser.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SysUserUpsert) ClearCreatedBy() *SysUserUpsert {
	u.SetNull(sysuser.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SysUserUpsert) SetUpdatedBy(v int64) *SysUserUpsert {
	u.Set(sysuser.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUpdatedBy() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SysUserUpsert) AddUpdatedBy(v int64) *SysUserUpsert {
	u.Add(sysuser.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SysUserUpsert) ClearUpdatedBy() *SysUserUpsert {
	u.SetNull(sysuser.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsert) SetUpdatedAt(v time.Time) *SysUserUpsert {
	u.Set(sysuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUpdatedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsert) SetDeletedAt(v time.Time) *SysUserUpsert {
	u.Set(sysuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateDeletedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsert) ClearDeletedAt() *SysUserUpsert {
	u.SetNull(sysuser.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysUserUpsertOne) UpdateNewValues() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sysuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysUserUpsertOne) Ignore() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertOne) DoNothing() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreate.OnConflict
// documentation for more info.
func (u *SysUserUpsertOne) Update(set func(*SysUserUpsert)) *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *SysUserUpsertOne) SetUsername(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUsername() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUsername()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertOne) SetEmail(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateEmail() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsertOne) SetPhone(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePhone() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *SysUserUpsertOne) SetPassword(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePassword() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePassword()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertOne) SetStatus(v sysuser.Status) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateStatus() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// SetFullName sets the "full_name" field.
func (u *SysUserUpsertOne) SetFullName(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateFullName() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateFullName()
	})
}

// ClearFullName clears the value of the "full_name" field.
func (u *SysUserUpsertOne) ClearFullName() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearFullName()
	})
}

// SetGender sets the "gender" field.
func (u *SysUserUpsertOne) SetGender(v sysuser.Gender) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateGender() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateGender()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertOne) SetAvatar(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateAvatar() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsertOne) ClearAvatar() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearAvatar()
	})
}

// SetLanguage sets the "language" field.
func (u *SysUserUpsertOne) SetLanguage(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateLanguage() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateLanguage()
	})
}

// SetTimezone sets the "timezone" field.
func (u *SysUserUpsertOne) SetTimezone(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateTimezone() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateTimezone()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SysUserUpsertOne) SetCreatedBy(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SysUserUpsertOne) AddCreatedBy(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateCreatedBy() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SysUserUpsertOne) ClearCreatedBy() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SysUserUpsertOne) SetUpdatedBy(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SysUserUpsertOne) AddUpdatedBy(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUpdatedBy() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SysUserUpsertOne) ClearUpdatedBy() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertOne) SetUpdatedAt(v time.Time) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUpdatedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertOne) SetDeletedAt(v time.Time) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertOne) ClearDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysUserUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysUserUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysUserCreateBulk is the builder for creating many SysUser entities in bulk.
type SysUserCreateBulk struct {
	config
	err      error
	builders []*SysUserCreate
	conflict []sql.ConflictOption
}

// Save creates the SysUser entities in the database.
func (sucb *SysUserCreateBulk) Save(ctx context.Context) ([]*SysUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SysUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SysUserCreateBulk) SaveX(ctx context.Context) []*SysUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SysUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SysUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertBulk {
	sucb.conflict = opts
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflictColumns(columns ...string) *SysUserUpsertBulk {
	sucb.conflict = append(sucb.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// SysUserUpsertBulk is the builder for "upsert"-ing
// a bulk of SysUser nodes.
type SysUserUpsertBulk struct {
	create *SysUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysUserUpsertBulk) UpdateNewValues() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sysuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysUserUpsertBulk) Ignore() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertBulk) DoNothing() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreateBulk.OnConflict
// documentation for more info.
func (u *SysUserUpsertBulk) Update(set func(*SysUserUpsert)) *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *SysUserUpsertBulk) SetUsername(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUsername() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUsername()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertBulk) SetEmail(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateEmail() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsertBulk) SetPhone(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePhone() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *SysUserUpsertBulk) SetPassword(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePassword() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePassword()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertBulk) SetStatus(v sysuser.Status) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateStatus() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// SetFullName sets the "full_name" field.
func (u *SysUserUpsertBulk) SetFullName(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetFullName(v)
	})
}

// UpdateFullName sets the "full_name" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateFullName() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateFullName()
	})
}

// ClearFullName clears the value of the "full_name" field.
func (u *SysUserUpsertBulk) ClearFullName() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearFullName()
	})
}

// SetGender sets the "gender" field.
func (u *SysUserUpsertBulk) SetGender(v sysuser.Gender) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateGender() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateGender()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertBulk) SetAvatar(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateAvatar() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *SysUserUpsertBulk) ClearAvatar() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearAvatar()
	})
}

// SetLanguage sets the "language" field.
func (u *SysUserUpsertBulk) SetLanguage(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateLanguage() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateLanguage()
	})
}

// SetTimezone sets the "timezone" field.
func (u *SysUserUpsertBulk) SetTimezone(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateTimezone() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateTimezone()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SysUserUpsertBulk) SetCreatedBy(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *SysUserUpsertBulk) AddCreatedBy(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateCreatedBy() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SysUserUpsertBulk) ClearCreatedBy() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SysUserUpsertBulk) SetUpdatedBy(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *SysUserUpsertBulk) AddUpdatedBy(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUpdatedBy() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SysUserUpsertBulk) ClearUpdatedBy() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertBulk) SetUpdatedAt(v time.Time) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUpdatedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertBulk) SetDeletedAt(v time.Time) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertBulk) ClearDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *SysUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
