// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuser"
)

// SysUserCreate is the builder for creating a SysUser entity.
type SysUserCreate struct {
	config
	mutation *SysUserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (suc *SysUserCreate) SetUsername(s string) *SysUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetEmail sets the "email" field.
func (suc *SysUserCreate) SetEmail(s string) *SysUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetPhone sets the "phone" field.
func (suc *SysUserCreate) SetPhone(s string) *SysUserCreate {
	suc.mutation.SetPhone(s)
	return suc
}

// SetPassword sets the "password" field.
func (suc *SysUserCreate) SetPassword(s string) *SysUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetStatus sets the "status" field.
func (suc *SysUserCreate) SetStatus(s sysuser.Status) *SysUserCreate {
	suc.mutation.SetStatus(s)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableStatus(s *sysuser.Status) *SysUserCreate {
	if s != nil {
		suc.SetStatus(*s)
	}
	return suc
}

// SetFullName sets the "full_name" field.
func (suc *SysUserCreate) SetFullName(s string) *SysUserCreate {
	suc.mutation.SetFullName(s)
	return suc
}

// SetGender sets the "gender" field.
func (suc *SysUserCreate) SetGender(s sysuser.Gender) *SysUserCreate {
	suc.mutation.SetGender(s)
	return suc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableGender(s *sysuser.Gender) *SysUserCreate {
	if s != nil {
		suc.SetGender(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SysUserCreate) SetAvatar(s string) *SysUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetLanguage sets the "language" field.
func (suc *SysUserCreate) SetLanguage(s string) *SysUserCreate {
	suc.mutation.SetLanguage(s)
	return suc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableLanguage(s *string) *SysUserCreate {
	if s != nil {
		suc.SetLanguage(*s)
	}
	return suc
}

// SetTimezone sets the "timezone" field.
func (suc *SysUserCreate) SetTimezone(s string) *SysUserCreate {
	suc.mutation.SetTimezone(s)
	return suc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableTimezone(s *string) *SysUserCreate {
	if s != nil {
		suc.SetTimezone(*s)
	}
	return suc
}

// SetLastLogin sets the "last_login" field.
func (suc *SysUserCreate) SetLastLogin(t time.Time) *SysUserCreate {
	suc.mutation.SetLastLogin(t)
	return suc
}

// SetLastIP sets the "last_ip" field.
func (suc *SysUserCreate) SetLastIP(s string) *SysUserCreate {
	suc.mutation.SetLastIP(s)
	return suc
}

// SetCreatedBy sets the "created_by" field.
func (suc *SysUserCreate) SetCreatedBy(i int64) *SysUserCreate {
	suc.mutation.SetCreatedBy(i)
	return suc
}

// SetUpdatedBy sets the "updated_by" field.
func (suc *SysUserCreate) SetUpdatedBy(i int64) *SysUserCreate {
	suc.mutation.SetUpdatedBy(i)
	return suc
}

// SetCreatedAt sets the "created_at" field.
func (suc *SysUserCreate) SetCreatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCreatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SysUserCreate) SetUpdatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUpdatedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *SysUserCreate) SetDeletedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetDeletedAt(t)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDeletedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetDeletedAt(*t)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *SysUserCreate) SetID(i int64) *SysUserCreate {
	suc.mutation.SetID(i)
	return suc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableID(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetID(*i)
	}
	return suc
}

// Mutation returns the SysUserMutation object of the builder.
func (suc *SysUserCreate) Mutation() *SysUserMutation {
	return suc.mutation
}

// Save creates the SysUser in the database.
func (suc *SysUserCreate) Save(ctx context.Context) (*SysUser, error) {
	if err := suc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SysUserCreate) SaveX(ctx context.Context) *SysUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SysUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SysUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SysUserCreate) defaults() error {
	if _, ok := suc.mutation.Status(); !ok {
		v := sysuser.DefaultStatus
		suc.mutation.SetStatus(v)
	}
	if _, ok := suc.mutation.Gender(); !ok {
		v := sysuser.DefaultGender
		suc.mutation.SetGender(v)
	}
	if _, ok := suc.mutation.Language(); !ok {
		v := sysuser.DefaultLanguage
		suc.mutation.SetLanguage(v)
	}
	if _, ok := suc.mutation.Timezone(); !ok {
		v := sysuser.DefaultTimezone
		suc.mutation.SetTimezone(v)
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		if sysuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		if sysuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.ID(); !ok {
		if sysuser.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized sysuser.DefaultID (forgotten import ent/runtime?)")
		}
		v := sysuser.DefaultID()
		suc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suc *SysUserCreate) check() error {
	if _, ok := suc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SysUser.username"`)}
	}
	if v, ok := suc.mutation.Username(); ok {
		if err := sysuser.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SysUser.username": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "SysUser.email"`)}
	}
	if v, ok := suc.mutation.Email(); ok {
		if err := sysuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "SysUser.email": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "SysUser.phone"`)}
	}
	if v, ok := suc.mutation.Phone(); ok {
		if err := sysuser.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "SysUser.phone": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SysUser.password"`)}
	}
	if v, ok := suc.mutation.Password(); ok {
		if err := sysuser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "SysUser.password": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SysUser.status"`)}
	}
	if v, ok := suc.mutation.Status(); ok {
		if err := sysuser.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SysUser.status": %w`, err)}
		}
	}
	if _, ok := suc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "SysUser.full_name"`)}
	}
	if _, ok := suc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "SysUser.gender"`)}
	}
	if v, ok := suc.mutation.Gender(); ok {
		if err := sysuser.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "SysUser.gender": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "SysUser.avatar"`)}
	}
	if _, ok := suc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "SysUser.language"`)}
	}
	if v, ok := suc.mutation.Language(); ok {
		if err := sysuser.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "SysUser.language": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "SysUser.timezone"`)}
	}
	if v, ok := suc.mutation.Timezone(); ok {
		if err := sysuser.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "SysUser.timezone": %w`, err)}
		}
	}
	if _, ok := suc.mutation.LastLogin(); !ok {
		return &ValidationError{Name: "last_login", err: errors.New(`ent: missing required field "SysUser.last_login"`)}
	}
	if _, ok := suc.mutation.LastIP(); !ok {
		return &ValidationError{Name: "last_ip", err: errors.New(`ent: missing required field "SysUser.last_ip"`)}
	}
	if _, ok := suc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SysUser.created_by"`)}
	}
	if _, ok := suc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "SysUser.updated_by"`)}
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysUser.updated_at"`)}
	}
	return nil
}

func (suc *SysUserCreate) sqlSave(ctx context.Context) (*SysUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SysUserCreate) createSpec() (*SysUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(sysuser.Table, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	)
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := suc.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := suc.mutation.FullName(); ok {
		_spec.SetField(sysuser.FieldFullName, field.TypeString, value)
		_node.FullName = &value
	}
	if value, ok := suc.mutation.Gender(); ok {
		_spec.SetField(sysuser.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := suc.mutation.Language(); ok {
		_spec.SetField(sysuser.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := suc.mutation.Timezone(); ok {
		_spec.SetField(sysuser.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := suc.mutation.LastLogin(); ok {
		_spec.SetField(sysuser.FieldLastLogin, field.TypeTime, value)
		_node.LastLogin = &value
	}
	if value, ok := suc.mutation.LastIP(); ok {
		_spec.SetField(sysuser.FieldLastIP, field.TypeString, value)
		_node.LastIP = &value
	}
	if value, ok := suc.mutation.CreatedBy(); ok {
		_spec.SetField(sysuser.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = &value
	}
	if value, ok := suc.mutation.UpdatedBy(); ok {
		_spec.SetField(sysuser.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = &value
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// SysUserCreateBulk is the builder for creating many SysUser entities in bulk.
type SysUserCreateBulk struct {
	config
	err      error
	builders []*SysUserCreate
}

// Save creates the SysUser entities in the database.
func (sucb *SysUserCreateBulk) Save(ctx context.Context) ([]*SysUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SysUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SysUserCreateBulk) SaveX(ctx context.Context) []*SysUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SysUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SysUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
