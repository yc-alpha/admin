// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuser"
)

// SysUser is the model entity for the SysUser schema.
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	// Primary Key ID
	ID int64 `json:"id,omitempty"`
	// Username of the user
	Username string `json:"username,omitempty"`
	// Email address of the user
	Email *string `json:"email,omitempty"`
	// Phone number of the user
	Phone *string `json:"phone,omitempty"`
	// Password of the user
	Password *string `json:"-"`
	// Status of the user
	Status sysuser.Status `json:"status,omitempty"`
	// Full name of the user
	FullName *string `json:"full_name,omitempty"`
	// User gender
	Gender sysuser.Gender `json:"gender,omitempty"`
	// Avatar URL of the user
	Avatar *string `json:"avatar,omitempty"`
	// Preferred language of the user
	Language string `json:"language,omitempty"`
	// Preferred timezone of the user
	Timezone string `json:"timezone,omitempty"`
	// User who created this record
	CreatedBy *int64 `json:"created_by,omitempty"`
	// User who last updated this record
	UpdatedBy *int64 `json:"updated_by,omitempty"`
	// Creation timestamp of the user record
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp of the user record
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Timestamp when the user was deleted, if applicable
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysUserQuery when eager-loading is set.
	Edges        SysUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SysUserEdges holds the relations/edges for other nodes in the graph.
type SysUserEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*SysUserAccount `json:"accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) AccountsOrErr() ([]*SysUserAccount, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldCreatedBy, sysuser.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldUsername, sysuser.FieldEmail, sysuser.FieldPhone, sysuser.FieldPassword, sysuser.FieldStatus, sysuser.FieldFullName, sysuser.FieldGender, sysuser.FieldAvatar, sysuser.FieldLanguage, sysuser.FieldTimezone:
			values[i] = new(sql.NullString)
		case sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt, sysuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int64(value.Int64)
		case sysuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				su.Username = value.String
			}
		case sysuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = new(string)
				*su.Email = value.String
			}
		case sysuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				su.Phone = new(string)
				*su.Phone = value.String
			}
		case sysuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = new(string)
				*su.Password = value.String
			}
		case sysuser.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				su.Status = sysuser.Status(value.String)
			}
		case sysuser.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				su.FullName = new(string)
				*su.FullName = value.String
			}
		case sysuser.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				su.Gender = sysuser.Gender(value.String)
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = new(string)
				*su.Avatar = value.String
			}
		case sysuser.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				su.Language = value.String
			}
		case sysuser.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				su.Timezone = value.String
			}
		case sysuser.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				su.CreatedBy = new(int64)
				*su.CreatedBy = value.Int64
			}
		case sysuser.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				su.UpdatedBy = new(int64)
				*su.UpdatedBy = value.Int64
			}
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sysuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				su.DeletedAt = new(time.Time)
				*su.DeletedAt = value.Time
			}
		default:
			su.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysUser.
// This includes values selected through modifiers, order, etc.
func (su *SysUser) Value(name string) (ent.Value, error) {
	return su.selectValues.Get(name)
}

// QueryAccounts queries the "accounts" edge of the SysUser entity.
func (su *SysUser) QueryAccounts() *SysUserAccountQuery {
	return NewSysUserClient(su.config).QueryAccounts(su)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return NewSysUserClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("username=")
	builder.WriteString(su.Username)
	builder.WriteString(", ")
	if v := su.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := su.Phone; v != nil {
		builder.WriteString("phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", su.Status))
	builder.WriteString(", ")
	if v := su.FullName; v != nil {
		builder.WriteString("full_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", su.Gender))
	builder.WriteString(", ")
	if v := su.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(su.Language)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(su.Timezone)
	builder.WriteString(", ")
	if v := su.CreatedBy; v != nil {
		builder.WriteString("created_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := su.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := su.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser
