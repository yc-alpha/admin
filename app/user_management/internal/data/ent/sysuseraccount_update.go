// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/predicate"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuser"
	"github.com/yc-alpha/admin/app/user_management/internal/data/ent/sysuseraccount"
)

// SysUserAccountUpdate is the builder for updating SysUserAccount entities.
type SysUserAccountUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserAccountMutation
}

// Where appends a list predicates to the SysUserAccountUpdate builder.
func (suau *SysUserAccountUpdate) Where(ps ...predicate.SysUserAccount) *SysUserAccountUpdate {
	suau.mutation.Where(ps...)
	return suau
}

// SetUserID sets the "user_id" field.
func (suau *SysUserAccountUpdate) SetUserID(i int64) *SysUserAccountUpdate {
	suau.mutation.SetUserID(i)
	return suau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillableUserID(i *int64) *SysUserAccountUpdate {
	if i != nil {
		suau.SetUserID(*i)
	}
	return suau
}

// SetPlatform sets the "platform" field.
func (suau *SysUserAccountUpdate) SetPlatform(s string) *SysUserAccountUpdate {
	suau.mutation.SetPlatform(s)
	return suau
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillablePlatform(s *string) *SysUserAccountUpdate {
	if s != nil {
		suau.SetPlatform(*s)
	}
	return suau
}

// SetIdentifier sets the "identifier" field.
func (suau *SysUserAccountUpdate) SetIdentifier(s string) *SysUserAccountUpdate {
	suau.mutation.SetIdentifier(s)
	return suau
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillableIdentifier(s *string) *SysUserAccountUpdate {
	if s != nil {
		suau.SetIdentifier(*s)
	}
	return suau
}

// SetName sets the "name" field.
func (suau *SysUserAccountUpdate) SetName(s string) *SysUserAccountUpdate {
	suau.mutation.SetName(s)
	return suau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillableName(s *string) *SysUserAccountUpdate {
	if s != nil {
		suau.SetName(*s)
	}
	return suau
}

// SetCreatedAt sets the "created_at" field.
func (suau *SysUserAccountUpdate) SetCreatedAt(t time.Time) *SysUserAccountUpdate {
	suau.mutation.SetCreatedAt(t)
	return suau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillableCreatedAt(t *time.Time) *SysUserAccountUpdate {
	if t != nil {
		suau.SetCreatedAt(*t)
	}
	return suau
}

// SetUpdatedAt sets the "updated_at" field.
func (suau *SysUserAccountUpdate) SetUpdatedAt(t time.Time) *SysUserAccountUpdate {
	suau.mutation.SetUpdatedAt(t)
	return suau
}

// SetDeletedAt sets the "deleted_at" field.
func (suau *SysUserAccountUpdate) SetDeletedAt(t time.Time) *SysUserAccountUpdate {
	suau.mutation.SetDeletedAt(t)
	return suau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suau *SysUserAccountUpdate) SetNillableDeletedAt(t *time.Time) *SysUserAccountUpdate {
	if t != nil {
		suau.SetDeletedAt(*t)
	}
	return suau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suau *SysUserAccountUpdate) ClearDeletedAt() *SysUserAccountUpdate {
	suau.mutation.ClearDeletedAt()
	return suau
}

// SetUser sets the "user" edge to the SysUser entity.
func (suau *SysUserAccountUpdate) SetUser(s *SysUser) *SysUserAccountUpdate {
	return suau.SetUserID(s.ID)
}

// Mutation returns the SysUserAccountMutation object of the builder.
func (suau *SysUserAccountUpdate) Mutation() *SysUserAccountMutation {
	return suau.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (suau *SysUserAccountUpdate) ClearUser() *SysUserAccountUpdate {
	suau.mutation.ClearUser()
	return suau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suau *SysUserAccountUpdate) Save(ctx context.Context) (int, error) {
	suau.defaults()
	return withHooks(ctx, suau.sqlSave, suau.mutation, suau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suau *SysUserAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := suau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suau *SysUserAccountUpdate) Exec(ctx context.Context) error {
	_, err := suau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suau *SysUserAccountUpdate) ExecX(ctx context.Context) {
	if err := suau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suau *SysUserAccountUpdate) defaults() {
	if _, ok := suau.mutation.UpdatedAt(); !ok {
		v := sysuseraccount.UpdateDefaultUpdatedAt()
		suau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suau *SysUserAccountUpdate) check() error {
	if v, ok := suau.mutation.UserID(); ok {
		if err := sysuseraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "SysUserAccount.user_id": %w`, err)}
		}
	}
	if suau.mutation.UserCleared() && len(suau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SysUserAccount.user"`)
	}
	return nil
}

func (suau *SysUserAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := suau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuseraccount.Table, sysuseraccount.Columns, sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt))
	if ps := suau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suau.mutation.Platform(); ok {
		_spec.SetField(sysuseraccount.FieldPlatform, field.TypeString, value)
	}
	if value, ok := suau.mutation.Identifier(); ok {
		_spec.SetField(sysuseraccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := suau.mutation.Name(); ok {
		_spec.SetField(sysuseraccount.FieldName, field.TypeString, value)
	}
	if value, ok := suau.mutation.CreatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suau.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suau.mutation.DeletedAt(); ok {
		_spec.SetField(sysuseraccount.FieldDeletedAt, field.TypeTime, value)
	}
	if suau.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuseraccount.FieldDeletedAt, field.TypeTime)
	}
	if suau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuseraccount.UserTable,
			Columns: []string{sysuseraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuseraccount.UserTable,
			Columns: []string{sysuseraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuseraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suau.mutation.done = true
	return n, nil
}

// SysUserAccountUpdateOne is the builder for updating a single SysUserAccount entity.
type SysUserAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserAccountMutation
}

// SetUserID sets the "user_id" field.
func (suauo *SysUserAccountUpdateOne) SetUserID(i int64) *SysUserAccountUpdateOne {
	suauo.mutation.SetUserID(i)
	return suauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillableUserID(i *int64) *SysUserAccountUpdateOne {
	if i != nil {
		suauo.SetUserID(*i)
	}
	return suauo
}

// SetPlatform sets the "platform" field.
func (suauo *SysUserAccountUpdateOne) SetPlatform(s string) *SysUserAccountUpdateOne {
	suauo.mutation.SetPlatform(s)
	return suauo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillablePlatform(s *string) *SysUserAccountUpdateOne {
	if s != nil {
		suauo.SetPlatform(*s)
	}
	return suauo
}

// SetIdentifier sets the "identifier" field.
func (suauo *SysUserAccountUpdateOne) SetIdentifier(s string) *SysUserAccountUpdateOne {
	suauo.mutation.SetIdentifier(s)
	return suauo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillableIdentifier(s *string) *SysUserAccountUpdateOne {
	if s != nil {
		suauo.SetIdentifier(*s)
	}
	return suauo
}

// SetName sets the "name" field.
func (suauo *SysUserAccountUpdateOne) SetName(s string) *SysUserAccountUpdateOne {
	suauo.mutation.SetName(s)
	return suauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillableName(s *string) *SysUserAccountUpdateOne {
	if s != nil {
		suauo.SetName(*s)
	}
	return suauo
}

// SetCreatedAt sets the "created_at" field.
func (suauo *SysUserAccountUpdateOne) SetCreatedAt(t time.Time) *SysUserAccountUpdateOne {
	suauo.mutation.SetCreatedAt(t)
	return suauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *SysUserAccountUpdateOne {
	if t != nil {
		suauo.SetCreatedAt(*t)
	}
	return suauo
}

// SetUpdatedAt sets the "updated_at" field.
func (suauo *SysUserAccountUpdateOne) SetUpdatedAt(t time.Time) *SysUserAccountUpdateOne {
	suauo.mutation.SetUpdatedAt(t)
	return suauo
}

// SetDeletedAt sets the "deleted_at" field.
func (suauo *SysUserAccountUpdateOne) SetDeletedAt(t time.Time) *SysUserAccountUpdateOne {
	suauo.mutation.SetDeletedAt(t)
	return suauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suauo *SysUserAccountUpdateOne) SetNillableDeletedAt(t *time.Time) *SysUserAccountUpdateOne {
	if t != nil {
		suauo.SetDeletedAt(*t)
	}
	return suauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suauo *SysUserAccountUpdateOne) ClearDeletedAt() *SysUserAccountUpdateOne {
	suauo.mutation.ClearDeletedAt()
	return suauo
}

// SetUser sets the "user" edge to the SysUser entity.
func (suauo *SysUserAccountUpdateOne) SetUser(s *SysUser) *SysUserAccountUpdateOne {
	return suauo.SetUserID(s.ID)
}

// Mutation returns the SysUserAccountMutation object of the builder.
func (suauo *SysUserAccountUpdateOne) Mutation() *SysUserAccountMutation {
	return suauo.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (suauo *SysUserAccountUpdateOne) ClearUser() *SysUserAccountUpdateOne {
	suauo.mutation.ClearUser()
	return suauo
}

// Where appends a list predicates to the SysUserAccountUpdate builder.
func (suauo *SysUserAccountUpdateOne) Where(ps ...predicate.SysUserAccount) *SysUserAccountUpdateOne {
	suauo.mutation.Where(ps...)
	return suauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suauo *SysUserAccountUpdateOne) Select(field string, fields ...string) *SysUserAccountUpdateOne {
	suauo.fields = append([]string{field}, fields...)
	return suauo
}

// Save executes the query and returns the updated SysUserAccount entity.
func (suauo *SysUserAccountUpdateOne) Save(ctx context.Context) (*SysUserAccount, error) {
	suauo.defaults()
	return withHooks(ctx, suauo.sqlSave, suauo.mutation, suauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suauo *SysUserAccountUpdateOne) SaveX(ctx context.Context) *SysUserAccount {
	node, err := suauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suauo *SysUserAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := suauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suauo *SysUserAccountUpdateOne) ExecX(ctx context.Context) {
	if err := suauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suauo *SysUserAccountUpdateOne) defaults() {
	if _, ok := suauo.mutation.UpdatedAt(); !ok {
		v := sysuseraccount.UpdateDefaultUpdatedAt()
		suauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suauo *SysUserAccountUpdateOne) check() error {
	if v, ok := suauo.mutation.UserID(); ok {
		if err := sysuseraccount.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "SysUserAccount.user_id": %w`, err)}
		}
	}
	if suauo.mutation.UserCleared() && len(suauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SysUserAccount.user"`)
	}
	return nil
}

func (suauo *SysUserAccountUpdateOne) sqlSave(ctx context.Context) (_node *SysUserAccount, err error) {
	if err := suauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuseraccount.Table, sysuseraccount.Columns, sqlgraph.NewFieldSpec(sysuseraccount.FieldID, field.TypeInt))
	id, ok := suauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysUserAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuseraccount.FieldID)
		for _, f := range fields {
			if !sysuseraccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysuseraccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suauo.mutation.Platform(); ok {
		_spec.SetField(sysuseraccount.FieldPlatform, field.TypeString, value)
	}
	if value, ok := suauo.mutation.Identifier(); ok {
		_spec.SetField(sysuseraccount.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := suauo.mutation.Name(); ok {
		_spec.SetField(sysuseraccount.FieldName, field.TypeString, value)
	}
	if value, ok := suauo.mutation.CreatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suauo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuseraccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suauo.mutation.DeletedAt(); ok {
		_spec.SetField(sysuseraccount.FieldDeletedAt, field.TypeTime, value)
	}
	if suauo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuseraccount.FieldDeletedAt, field.TypeTime)
	}
	if suauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuseraccount.UserTable,
			Columns: []string{sysuseraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuseraccount.UserTable,
			Columns: []string{sysuseraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysUserAccount{config: suauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuseraccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suauo.mutation.done = true
	return _node, nil
}
